# -*- coding: utf-8 -*-


# Form implementation generated from reading ui file 'ha.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox, QFileDialog
import subprocess
import shutil
import os
import sys
from vtk import vtkPDBReader, vtkPolyDataMapper, vtkActor, vtkRenderer, vtkLightKit, vtkTubeFilter
from vtkmodules.qt.QVTKRenderWindowInteractor import QVTKRenderWindowInteractor
from rdkit import Chem
from rdkit.Chem import AllChem
from MolKit import Read
import subprocess
import shutil
import os
import sys
from Bio.PDB import PDBParser, PDBIO, NeighborSearch, Selection
from AutoDockTools.MoleculePreparation import AD4ReceptorPreparation
from AutoDockTools.MoleculePreparation import AutoDockMoleculePreparation
from rdkit.Chem import EnumerateStereoisomers








 









if getattr(sys, 'frozen', False):
   import pyi_splash



a = os.path.dirname(sys.executable) 
print (a)

image_icon_path = os.path.join(a, "G\\images\\icon.ico")
image_max_path = os.path.join(a, "G\\images\\max.jpeg")
image_dock_path = os.path.join(a, "G\\images\\dock.jpeg")
image_woo_path = os.path.join(a, "G\\images\\woo.jpeg")
image_mty_path = os.path.join(a, "G\\images\\mty.jpeg")
analyze_move_path = os.path.join(a, "G\\Analyser")
ligand_prep_move_path = os.path.join(a, "G\\Ligand Prep")
analyse_activate_path = os.path.join(a, "G\\Analyser\\analyse.bat")
refresh_activate_path = os.path.join(a, "G\\refresh.bat")
protein_move_path = os.path.join(a, "G\\Protein Prep\\process.pdbqt")
ligand_dele_path = os.path.join(a, "G\\Ligand Prep\\delete.bat")
ligand_prep_path = os.path.join(a, "G\\Ligand Prep\\ligprep.bat")
ligand_mol2_path = os.path.join(a, "G\\Ligand Prep\\mol2prep.bat" )
protein_prep_path = os.path.join(a, "G\\Protein Prep\\prepprot.bat")
select_co_move_path = os.path.join(a, "G\\single prepare")
co_activate_path = os.path.join(a, "G\\single prepare\\convert.bat")
run_dock_path = os.path.join(a, "G\\SMINA DOCK\\smina.bat")
output = os.path.join(a, "G\\SMINA DOCK\\output")
ana = os.path.join(a, "G\\analyze file")
gpro = os.path.join(a, "G\\SMINA DOCK\\protein.pdbqt")
prev = os.path.join(a, "G\\previous.bat")
clig = os.path.join(a, "G\\SMINA DOCK\\co.pdbqt")
initial = os.path.join(a, "G\\images\\benzene.pdb")
pathsmiles = os.path.join(a, "G\\Ligand Prep\\output.sdf")
propath = os.path.join(a, "G\\SMINA DOCK\\protein.pdbqt")
output_folder = os.path.join(a, "G\\nonstdres")
updated = os.path.join(a, "G\\nonstdres_A.pdb")
run_manualdock = os.path.join(a, "G\\SMINA DOCK\\sminamanual.bat")
pdbligandpath = os.path.join(a, "G\\Ligand Prep\\pdbprep.bat")
chainpathh = os.path.join(a, "G\\dela\\aaa.bat")
chain = os.path.join(a, "G\\dela\\protein.pdb")
chainpath2 = os.path.join(a, "G\\dela\\2chain.bat")
splashpic = os.path.join(a, "G\\images\\docks.png")
isomerdir = os.path.join(a, "G\\Ligand Prep")
ligandmol = os.path.join(a, "G\\Ligand Prep\\molprep.bat")
splitout = os.path.join(a, "G\\split")
splitbat = os.path.join(a, "G\\split\\split.bat")
splitres =  os.path.join(a, "G\\split\\out")
analyzefinal = os.path.join(a, "G\\Analyser\\complex.pdb")
pymoo = os.path.join(a, "G\\pymo\\open.bat")
repe = os.path.join(a, "G\\repeat.bat")
flexcopath = os.path.join(a, "G\\SMINA DOCK\\flexsmina.bat")
flexmanual = os.path.join(a, "G\\SMINA DOCK\\flexsminamanual.bat")
ensflex = os.path.join(a, "G\\ensemblesplit\\my.bat")
enssplit = os.path.join(a, "G\\ensemblesplit\\files")
repex = os.path.join(a, "G\\repeatflex.bat")





            
class UI_MainWindow():
      
      def setupUI(self, MainWindow):
        super().__init__()
        
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        MainWindow.setMaximumSize(800, 600)
        global icon
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(image_icon_path), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setToolTip("")
        global widget
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        widget = self.centralwidget
        self.view = QtWidgets.QWidget(self.centralwidget)
        self.view.setGeometry(QtCore.QRect(0, 330, 250, 250))

        self.layout = QtWidgets.QVBoxLayout(self.view)
        
        self.vtkWidget = QVTKRenderWindowInteractor(self.view)
        self.layout.addWidget(self.vtkWidget)

        self.ren = vtkRenderer()
        self.vtkWidget.GetRenderWindow().AddRenderer(self.ren)
        self.reader = vtkPDBReader()
        benzene = initial
        
        self.reader.SetFileName(benzene)
        global mainvtk
        mainvtk = self.reader
        global mainren
        mainren = self.ren

        self.ribbonFilter = vtkTubeFilter()
        self.ribbonFilter.SetInputConnection(self.reader.GetOutputPort())
        self.ribbonFilter.SetNumberOfSides(50)
        self.ribbonFilter.SetRadius(0.2)

        self.mapper = vtkPolyDataMapper()
        self.mapper.SetInputConnection(self.ribbonFilter.GetOutputPort())

        self.actor = vtkActor()
        self.actor.SetMapper(self.mapper)

        self.ren.AddActor(self.actor)
        self.ren.SetBackground(0, 0, 0)

        self.lighting = vtkLightKit()
        self.lighting.MaintainLuminanceOff()
        self.lighting.AddLightsToRenderer(self.ren)

        self.property = self.actor.GetProperty()
        self.property.SetInterpolationToPhong()
        self.property.SetAmbient(0.2)
        self.property.SetDiffuse(0.8)
        self.property.SetSpecular(0.8)
        self.property.SetSpecularPower(50)

        self.ren.ResetCamera()
        
        self.vtkWidget.GetRenderWindow().Render()
        self.vtkWidget.GetRenderWindow().SetSize(800, 600) 
        
        
        self.label14 = QtWidgets.QLabel(self.centralwidget)
        self.pixmap = QtGui.QPixmap(image_dock_path)
        self.label14.setPixmap(self.pixmap)
        self.label14.resize(500, 30)
        self.label15 = QtWidgets.QLabel(self.centralwidget)
        self.pixmap = QtGui.QPixmap(image_max_path)
        self.label15.setPixmap(self.pixmap)
        self.label15.resize(500, 30)
        self.label15.move(275, 0)
        self.label16 = QtWidgets.QLabel(self.centralwidget)
        self.pixmap = QtGui.QPixmap(image_mty_path)
        self.label16.setPixmap(self.pixmap)
        self.label16.resize(500, 30)
        self.label16.move(545, 0)
        def analyzeflex():
          odir, _ = QFileDialog.getOpenFileName(None, "Choose Your Flex PDB", "", 'Protein Data Bank Files(*.pdb)')
          if not odir:
                 QMessageBox.warning(self.centralwidget, "MzDOCK", "Please Choose Your Flex PDB")
                 return
          else:
             pathxx = os.path.basename(odir)
             base = os.path.dirname(ensflex)
             shutil.copy(odir, base)
             print("Splitting Ensemble Model")
             os.chdir(base)
             listflex = [ensflex, pathxx]
             subprocess.call(listflex, shell=True)
             damn, _ = QFileDialog.getOpenFileName(None, "Choose One Model For Complex Generation", enssplit ,'Protein Data Bank Files(*.pdb)')
             if not damn:
                QMessageBox.warning(self.centralwidget, "MzDOCK", "Please Choose Your Model PDB")
                pat = os.path.dirname(repex)
                os.chdir(pat)
                subprocess.call(repex, shell=True)
                return
             else:
                
                pathway = os.path.dirname(pymoo)
                shutil.copy(damn, pathway )
                file, _ = QFileDialog.getOpenFileName(None, "Choose Your Output PDBQT", "", 'PDBQT Files(*.pdbqt)')
                if not file:
                 QMessageBox.warning(self.centralwidget, "MzDOCK", "Please Choose Your Output PDBQT")
                 pat = os.path.dirname(repex)
                 os.chdir(pat)
                 subprocess.call(repex, shell=True)
                 return
                else:
                  path = os.path.basename(file)
                  shutil.copy(file, splitout)
                  print("Splitting...")
                  os.chdir(splitout)
                  list = [splitbat, path]
                  subprocess.call(list, shell=True)
                  splitted, _ = QFileDialog.getOpenFileName(None, "Choose Your Poses", splitres, 'PDBQT Files(*.pdbqt)')
                  if not splitted:
                    QMessageBox.warning(self.centralwidget, "MzDOCK", "Please Choose Your Pose")
                    pat = os.path.dirname(repex)
                    os.chdir(pat)
                    subprocess.call(repex, shell=True)
                    return
                  else:
                    
                      
                    filename = os.path.basename(damn)
                    ligname = os.path.basename(splitted)
                    pathwayx = os.path.dirname(pymoo)
                    shutil.copy(splitted, pathwayx)
                    os.chdir(pathwayx)
                    list = [pymoo, filename, ligname]
                    subprocess.call(list, shell=True )
                
                    analyzing_pdb = analyse_activate_path
                    batch_dir = os.path.dirname(analyzing_pdb)
                    os.chdir(batch_dir)
                    subprocess.run(analyzing_pdb, shell=True)
                    info = "Succesfully Analyzed Your PDB Complex"
                    QMessageBox.information(self.centralwidget, "MzDOCK", info)
                    odira = QFileDialog.getExistingDirectory(None, "Save Your Results In A Folder")
                    if not odira:
                          eror = "You Havent Choosen A Directory To Save Your Files"
                          QMessageBox.critical(self.centralwidget, "MzDOCK", eror)
                          self.pushButton12.setEnabled(True)
                          self.pushButton10.setEnabled(False)
                          self.pushButtonflexa.setEnabled(False)

                              
                    else:
                            
                            
                            
                                for filename in os.listdir(ana):
                                  file_path = os.path.join(ana, filename)
                                  dest =os.path.join(odira, filename)
                                  if os.path.isfile(file_path):  
                                    shutil.move(file_path, dest)
                                  
                                


                                self.pushButton11.setEnabled(False)
                                
                              
                                self.pushButton12.setEnabled(False)
                                infox = "Results Are Saved"
                                QMessageBox.information(self.centralwidget, "MzDOCK", infox)
                                pat = os.path.dirname(repex)
                                os.chdir(pat)
                                subprocess.call(repex, shell=True)
                      


                
             
             

        self.pushButtonflexa = QtWidgets.QPushButton(self.centralwidget)
        self.pushButtonflexa.setGeometry(QtCore.QRect(295, 530, 93, 28))
        self.pushButtonflexa.setText("Analyze Flex")
        self.pushButtonflexa.clicked.connect(analyzeflex)
       
        
        


        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(0, 30, 801, 81))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setFrameShape(QtWidgets.QFrame.Panel)
        self.label.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.label.setLineWidth(5)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(360, 180, 241, 16))
        self.label_2.setObjectName("label_2")
        self.label8 =  QtWidgets.QLabel(self.centralwidget)
        self.label8.setGeometry(QtCore.QRect(450, 125, 241, 16))
        self.label8.setObjectName("label8")
        global labelx
        self.label9 = QtWidgets.QLabel(self.centralwidget)
        self.label9.setGeometry(QtCore.QRect(610, 180, 241, 16))
        self.label9.setText("(Ligands prepared for dock)")
        font = QtGui.QFont()
        font.setBold(True)
        self.label9.setFont(font)
        self.label9.setEnabled(False)
        labelx = self.label9
        self.label10 = QtWidgets.QLabel(self.centralwidget)
        self.label10.setGeometry(QtCore.QRect(610, 230, 241, 20))
        self.label10.setText("(Protein prepared for dock)")
        self.label10.setEnabled(False)
        global labelxx
        labelxx = self.label10
        font = QtGui.QFont()
        font.setBold(True)
        self.label10.setFont(font)

        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(30, 180, 91, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.label11 = QtWidgets.QLabel(self.centralwidget)
        self.label11.setGeometry(QtCore.QRect(610, 290, 251, 16))
        self.label11.setText("(BindingSite Confirmed)")
        self.label11.setEnabled(False)
        font = QtGui.QFont()
        font.setBold(True)
        self.label11.setFont(font)
        global labelco
        labelco = self.label11
        
        self.label12 = QtWidgets.QLabel(self.centralwidget)
        self.label12.setGeometry(QtCore.QRect(450, 360, 191, 16))
        self.label12.setText("(Ready To Dock)")
        font = QtGui.QFont()
        font.setBold(True)
        self.label12.setFont(font)
        self.label12.setEnabled(False)
        global labeldck
        labeldck = self.label12
        self.label13 =QtWidgets.QLabel(self.centralwidget)
        self.label13.setGeometry(QtCore.QRect(10, 85, 400, 16))
        self.label13.setText("Created By Muzammil Kabier")
        self.lineedit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineedit.setObjectName("Lineedit")
        self.lineedit.setGeometry(QtCore.QRect(650, 350, 50, 40))
        self.lineedit.setEnabled(False)
        

        def analyze():
           if os.path.exists(gpro):
              file, _ = QFileDialog.getOpenFileName(None, "Choose Your Output PDBQT", "", 'PDBQT Files(*.pdbqt)')
              if not file:
                 QMessageBox.warning(self.centralwidget, "MzDOCK", "Please Choose Your Output PDBQT")
                 return
              else:
                path = os.path.basename(file)
                shutil.copy(file, splitout)
                print("Splitting...")
                os.chdir(splitout)
                list = [splitbat, path]
                subprocess.call(list, shell=True)
                splitted, _ = QFileDialog.getOpenFileName(None, "Choose Your Poses", splitres, 'PDBQT Files(*.pdbqt)')
                if not splitted:
                   QMessageBox.warning(self.centralwidget, "MzDOCK", "Please Choose Your Pose")
                   pat = os.path.dirname(repe)
                   os.chdir(pat)
                   subprocess.call(repe, shell=True)
                   return
                else:
                    
                  pathway = os.path.dirname(pymoo)
                  shutil.copy(gpro, pathway)
                  prot = os.path.basename(gpro)
                  shutil.copy(splitted, pathway)
                  ligname = os.path.basename(splitted)
                  os.chdir(pathway)
                  list = [pymoo, prot, ligname]
                  subprocess.call(list, shell=True )
              
                  analyzing_pdb = analyse_activate_path
                  batch_dir = os.path.dirname(analyzing_pdb)
                  os.chdir(batch_dir)
                  subprocess.run(analyzing_pdb, shell=True)
                  info = "Succesfully Analyzed Your PDB Complex"
                  QMessageBox.information(self.centralwidget, "MzDOCK", info)
                  odira = QFileDialog.getExistingDirectory(None, "Save Your Results In A Folder")
                  if not odira:
                        eror = "You Havent Choosen A Directory To Save Your Files"
                        QMessageBox.critical(self.centralwidget, "MzDOCK", eror)
                        self.pushButton12.setEnabled(True)
                        self.pushButton10.setEnabled(False)

                            
                  else:
                          
                          
                          
                              for filename in os.listdir(ana):
                                file_path = os.path.join(ana, filename)
                                dest =os.path.join(odira, filename)
                                if os.path.isfile(file_path):  
                                  shutil.move(file_path, dest)
                                
                              


                              self.pushButton11.setEnabled(False)
                              
                            
                              self.pushButton12.setEnabled(False)
                              infox = "Results Are Saved"
                              QMessageBox.information(self.centralwidget, "MzDOCK", infox)
                              pat = os.path.dirname(repe)
                              os.chdir(pat)
                              subprocess.call(repe, shell=True)
                    

           
           else:
                odir, _ = QFileDialog.getOpenFileName(None, "Choose Your Complex PDB file to analyze ", "", 'Protein Data Bank Files (*.pdb)')
                if not odir:
                    error = "Choose Your PDB Complex to Analyze Interactions"
                    QMessageBox.critical(self.centralwidget, "MzDOCK", error)
                else:
                    dest =  analyze_move_path
                    shutil.copy(odir, dest)
                    analyzing_pdb = analyse_activate_path
                    batch_dir = os.path.dirname(analyzing_pdb)
                    os.chdir(batch_dir)
                    subprocess.run(analyzing_pdb, shell=True)
                    info = "Succesfully Analyzed Your PDB Complex"
                    QMessageBox.information(self.centralwidget, "MzDOCK", info)
                    odira = QFileDialog.getExistingDirectory(None, "Save Your Results In A Folder")
                    if not odira:
                        eror = "You Havent Choosen A Directory To Save Your Files"
                        QMessageBox.critical(self.centralwidget, "MzDOCK", eror)
                        self.pushButton12.setEnabled(True)
                        self.pushButton10.setEnabled(False)

                            
                    else:
                          
                          
                          
                              for filename in os.listdir(ana):
                                file_path = os.path.join(ana, filename)
                                dest =os.path.join(odira, filename)
                                if os.path.isfile(file_path):  
                                  shutil.move(file_path, dest)
                                
                              


                              self.pushButton11.setEnabled(False)
                              
                            
                              self.pushButton12.setEnabled(False)
                              infox = "Results Are Saved"
                              QMessageBox.information(self.centralwidget, "MzDOCK", infox)
                              pat = os.path.dirname(repe)
                              os.chdir(pat)
                              subprocess.call(repe, shell=True)
                      
                  
                        

                  
                  
    

            
            
            
                
            
        
        self.pushButton10 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton10.setGeometry(QtCore.QRect(250, 450, 191, 71))
        self.pushButton10.setObjectName("pushButton10")
        self.pushButton10.setStatusTip("Analysis Report Of Provided Docked Complex")
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton10.setFont(font)
        self.pushButton10.clicked.connect(analyze)
        def getprotein():
             odir = QFileDialog.getExistingDirectory(None, "Save your Protein in a Folder")
             if not odir:
                 error = "Choose the Directory To Save Your Protein"
                 QMessageBox.critical(self.centralwidget, "MzDOCK", error)
             else:
            
              file_path = gpro
              filename = os.path.basename(file_path)
              dest = os.path.join(odir, filename)
              if os.path.isfile(file_path):
                shutil.copy(file_path, dest)
              info = "The Protein is Saved"
              QMessageBox.information(self.centralwidget, "MzDOCK", info)
             
        
        
        self.pushButton15 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton15.setGeometry(QtCore.QRect(460, 490, 93, 28))
        self.pushButton15.setObjectName("pushbutton15")
        self.pushButton15.setStatusTip("Save The Prepared Protein")
        self.pushButton15.setEnabled(False)
        self.pushButton15.clicked.connect(getprotein)
        global button4
        button4 = self.pushButton15
        self.pushbuttonzoom = QtWidgets.QPushButton(self.centralwidget)
        self.pushbuttonzoom.setGeometry(QtCore.QRect(145, 540, 93, 28))
        self.pushbuttonzoom.setObjectName("zoom")
        self.pushbuttonzoom.clicked.connect(dialogzam)
        self.pushbuttonzoom.setEnabled(False)
        def previ():
           previous = prev
           batch_dir = os.path.dirname(previous)
           os.chdir(batch_dir)
           subprocess.call(previous, shell=True)
           self.pushButton.setEnabled(False)
           info = "Previous Ligands Are Choosen"
           QMessageBox.information(self.centralwidget, "MzDOCK", info)
           self.label9.setEnabled(False)
           self.label10.setEnabled(False)
           self.label11.setEnabled(False)
           self.label12.setEnabled(False)
           self.pushButton99.setEnabled(False)
           self.pushButton_3.setEnabled(True)
           self.pushButton_5.setEnabled(False)
           self.pushButton11.setEnabled(False)
           self.pushButton15.setEnabled(False)

           
        
        self.pushButton99 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton99.setGeometry(QtCore.QRect(240, 170, 93, 28))
        self.pushButton99.setText("Previous")
        self.pushButton99.setEnabled(False)
        self.pushButton99.clicked.connect(previ)
        def getligand():
             odir = QFileDialog.getExistingDirectory(None, "Save your Coligand in a Folder")
             if not odir:
                 error = "Choose the Directory To Save Your CoLigand"
                 QMessageBox.critical(self.centralwidget, "MzDOCK", error)
             else:
            
              file_path = clig
              filename = os.path.basename(file_path)
              dest = os.path.join(odir, filename)
              if os.path.isfile(file_path):
                shutil.copy(file_path, dest)
              info = "The Coligand is Saved"
              QMessageBox.information(self.centralwidget, "MzDOCK", info)
        
        
        
        
        
        self.pushButton101 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton101.setGeometry(QtCore.QRect(460, 530, 93, 28))
        self.pushButton101.setText("Get CLigand")
        self.pushButton101.setEnabled(False)
        self.pushButton101.clicked.connect(getligand)
        global buttonc
        buttonc = self.pushButton101




         
        






        

      
            

         
             
        
        
          
         
        
        
       
       
       
       
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(130, 170, 93, 28))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.setStatusTip("Select Your Ligands")
        self.pushButton.clicked.connect(dialog1)
        self.pushButton.setEnabled(False)
        global button1
        button1 = self.pushButton
       
        

          
       
       
        
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(30, 240, 91, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        
        def sele_pro_files():
            global pro
            pro, _ = QFileDialog.getOpenFileName(None, "Choose Your Protein ", "", 'Protein Data Bank Files (*.pdb)')
            if  not pro:
               eror = "You havent Choosen The Protein"
               QMessageBox.critical(self.centralwidget, "MzDOCK", eror)
               
            else:
               
              self.reader.SetFileName(pro)
              self.ren.ResetCamera()
              self.pushButton_4.setEnabled(True)  
              self.pushButton_3.setEnabled(False)
              self.pushbuttonzoom.setEnabled(True)
              info = "Succesfully Selected The Protein For Docking, Click Prepare"
              QMessageBox.information(self.centralwidget, "MzDOCK", info)
              dialogchains()
              
            
              
              
              


              
              
            
        
        
        
        
        
        
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(130, 230, 93, 28))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(sele_pro_files)
        self.pushButton_3.setEnabled(False)
        self.pushButton_3.setStatusTip("Select Your Protein ")
        global button2
        button2 = self.pushButton_3
        
        
        def refresh():
            refresh_file = refresh_activate_path
            batch_dir = os.path.dirname(refresh_file)
            os.chdir(batch_dir)
            subprocess.call(refresh_file, shell=True)
            self.pushButton.setEnabled(True)
            self.pushButton_3.setEnabled(False)
            self.pushButton_5.setEnabled(False)
            self.pushButton_4.setEnabled(False)
            self.pushButton_6.setEnabled(False)
            self.pushButton_7.setEnabled(False)
            self.pushButton15.setEnabled(False)
            self.pushButton99.setEnabled(False)
            self.pushButton11.setEnabled(False)
            self.pushButton12.setEnabled(False)
            self.pushButton101.setEnabled(False)
            self.pushButton10.setEnabled(True)
            self.lineedit.setEnabled(False)
            self.label9.setEnabled(False)
            self.label10.setEnabled(False)
            self.label11.setEnabled(False)
            self.label12.setEnabled(False)
            self.pushButton12.setEnabled(False)
            self.pushButtonflexa.setEnabled(True)
            print("----Welcome To MzDOCK Created By Muzammil Kabier, Pressing This Button Starts A New Session Or Refreshes The Session To Start All Over Again---")
            print("------------------------Molecular Docking Is Made Easy With MzDOCK-----------------------------------------------")
            self.pushbuttonzoom.setEnabled(False)




        
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(240, 230, 93, 28))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.setEnabled(False)
        self.pushButton_4.clicked.connect(dialog5)
        self.pushButton_4.setStatusTip("Prepare Your Protein")
        global button3
        button3 = self.pushButton_4
        self.pushButton9 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton9.setGeometry(QtCore.QRect(350, 120, 93, 28))
        self.pushButton9.setObjectName("pushButton9")
        self.pushButton9.setStatusTip("Click Before Starting A New Project Or To Delete All Intermediate Files")
        self.pushButton9.clicked.connect(refresh)
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(360, 230, 141, 20))
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(20, 300, 111, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.label100 = QtWidgets.QLabel(self.centralwidget)
        self.label100.setGeometry(QtCore.QRect(600, 350, 50, 40))
        self.label100.setObjectName("sd")
        font1 = QtGui.QFont()
        font1.setBold(True)
        self.label100.setFont(font1)

      

        
      

        def activate_bat3():
            prepare_co = co_activate_path
            batch_dir = os.path.dirname(prepare_co)
            os.chdir(batch_dir)
            subprocess.call(prepare_co, shell=True)
            self.pushButton_7.setEnabled(True)
            self.pushButton_6.setEnabled(False)
            self.label11.setEnabled(True)
            self.label12.setEnabled(True)
            info = "Binding Site Is Defined For Docking"
            QMessageBox.information(self.centralwidget, "MzDOCK", info)
            self.pushButton101.setEnabled(True)
            self.lineedit.setEnabled(True)
        
        
        
        
        
        
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(130, 290, 93, 28))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_5.setEnabled(False)
        self.pushButton_5.clicked.connect(dialog7)
        self.pushButton_5.setStatusTip("Select The Binding Site")
        global button5
        button5 = self.pushButton_5
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(240, 290, 93, 28))
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_6.setEnabled(False)
        self.pushButton_6.clicked.connect(activate_bat3)
        self.pushButton_6.setStatusTip(" Setting A Molecule For Autobox Ligand To Give Binding Site Infomation")
        global button6
        button6 = self.pushButton_6
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(360, 290, 251, 16))
        self.label_7.setObjectName("label_7")
        def file_exists_and_not_empty(directory, extension):
          for filename in os.listdir(directory):
              file_path = os.path.join(directory, filename)
              if filename.endswith(extension) and os.path.exists(file_path) and os.path.getsize(file_path) > 0:
                  return True
          return False
        
        
        def activate_bat4():
            input = self.lineedit.text()
            try:
                global inputcon
                inputcon = int(input)  # Try to convert the input to an integer
            except ValueError:
                man = "Please Give A Numerical Value "
                QMessageBox.critical(self.centralwidget, "MzDOCK", man)
                return
            else:
                 if inputcon > 50:
                  gry = "Maximum Number Of Modes Is 50"
                  QMessageBox.critical(self.centralwidget, "MzDOCK", gry)
                 elif inputcon < 5:
                    para = "Please Set The Value 5 And Above"
                    QMessageBox.critical(self.centralwidget, "MzDOCK",para)

                  
                 else:    
                        
                        run_docking = run_dock_path
                        batch_dir = os.path.dirname(run_docking)
                        os.chdir(batch_dir)
                        run = [run_dock_path, str(inputcon), bufferspace]
                        subprocess.call(run, shell=True)
                        if file_exists_and_not_empty(output, ".pdbqt"):
                          info = "Docking Is Succesful"
                          QMessageBox.information(self.centralwidget, "MzDOCK", info)
                          odir = QFileDialog.getExistingDirectory(None, "Save Your Results In A Folder")
                          if not odir:
                            eror = "Your Results Were Not Saved As You Havent Selected Your Directory"
                            QMessageBox.critical(self.centralwidget, "MzDOCK", eror)
                            self.pushButton11.setEnabled(True)
                            self.pushButton_7.setEnabled(False)
              
                          else:
            
                            for filename in os.listdir(output):
                              file_path = os.path.join(output, filename)
                              dest =os.path.join(odir, filename)
                              if os.path.isfile(file_path):
                                shutil.move(file_path, dest)  
              
                            

                          
                            self.pushButton_7.setEnabled(False)
                            self.pushButton11.setEnabled(False)
                            infox = "Results Are Saved"
                            QMessageBox.information(self.centralwidget, "MzDOCK", infox)
                            self.pushButton99.setEnabled(True)

                        else:
                           QMessageBox.critical(self.centralwidget, "MzDOCK", "Docking Unsucessful" )

        def saving_results():
           
         odir = QFileDialog.getExistingDirectory(None, "Save Your Results In A Folder")
         if not odir:
             eror = "Your Results Were Not Saved As You Havent Selected Your Directory"
             QMessageBox.critical(self.centralwidget, "MzDOCK", eror)
             
         else:
           
          for filename in os.listdir(output):
                file_path = os.path.join(output, filename)
                dest =os.path.join(odir, filename)
                if os.path.isfile(file_path):
                 shutil.move(file_path, dest)
             
          info = "Succesfully Saved Your Results"
          QMessageBox.information(self.centralwidget, "MzDOCK", info)

          self.pushButton11.setEnabled(False)
          self.pushButton99.setEnabled(True)
          
        
        
       
        
        
        self.pushButton11 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton11.setGeometry(QtCore.QRect(460, 380, 93, 28))
        self.pushButton11.clicked.connect(saving_results)
        self.pushButton11.setObjectName("pushbutton11")
        self.pushButton11.setEnabled(False)
        self.pushButton11.setStatusTip("Save Your Results")
        global button11
        button11 = self.pushButton11
        
        def analy():
           
            
         odir = QFileDialog.getExistingDirectory(None, "Save Your Results In A Folder")
         if not odir:
             eror = "You Havent Choosen A Directory To Save Your Files"
             QMessageBox.critical(self.centralwidget, "MzDOCK", eror)

              
         else:
            
            
            
          for filename in os.listdir(ana):
             file_path = os.path.join(ana, filename)
             dest =os.path.join(odir, filename)
             if os.path.isfile(file_path):  
               shutil.move(file_path, dest)
             
          info = "Succesfully Saved Your Results"
          QMessageBox.information(self.centralwidget, "MzDOCK", info)
          pat = os.path.dirname(repe)
          os.chdir(pat)
          subprocess.call(repe, shell=True)


          self.pushButton11.setEnabled(False)
          self.pushButton12.setEnabled(False)
          self.pushButton10.setEnabled(True)
              
        
        
        
        
        
        
        
        
        self.pushButton12 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton12.setGeometry(QtCore.QRect(460, 450, 93, 28))
        self.pushButton12.clicked.connect(analy)
        self.pushButton12.setObjectName("pushbutton12")
        self.pushButton12.setEnabled(False)
        self.pushButton12.setStatusTip("Save Your Analysis Results")
        self.pushButton_7 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_7.setGeometry(QtCore.QRect(250, 340, 191, 71))
        self.pushButton_7.setEnabled(False)
        self.pushButton_7.clicked.connect(activate_bat4)
        self.pushButton_7.setStatusTip("Click To Run Molecular Docking ")
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_7.setFont(font)
        self.pushButton_7.setObjectName("pushButton_7")
        global button7
        button7 = self.pushButton_7
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

      def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MzDOCK"))
        self.label.setText(_translate("MainWindow", "Welcome to MzDOCK, An Automated Pipeline For Molecular Docking"))
        self.label_2.setText(_translate("MainWindow", "1. Preparing The Ligands"))
        self.label_3.setText(_translate("MainWindow", "Select Ligand"))
        self.label8.setText(_translate("MainWindow", "Click New to Start or Refresh"))
        self.pushButton9.setText(_translate("MainWindow", "New"))
        self.pushButton.setText(_translate("MainWindow", "Select"))
        self.label_4.setText(_translate("MainWindow", "Select Protein"))
        self.pushButton_3.setText(_translate("MainWindow", "Select"))
        self.pushButton_4.setText(_translate("MainWindow", "Prepare"))
        self.label_5.setText(_translate("MainWindow", "2. Preparing The Protein"))
        self.label_6.setText(_translate("MainWindow", "Select Co Ligand"))
        self.pushButton_5.setText(_translate("MainWindow", "Select"))
        self.pushButton_6.setText(_translate("MainWindow", "Prepare"))
        self.label_7.setText(_translate("MainWindow", "3. Binding Site Configuration"))
        self.pushButton_7.setText(_translate("MainWindow", "Run Docking"))
        self.pushButton10.setText(_translate("MainWindow", "Analyze"))
        self.pushButton11.setText(_translate("MainWindow", "Save"))
        self.pushButton12.setText(_translate("MainWindow", "Save"))
        self.pushButton15.setText(_translate("MainWindow", "GetProtein"))
        self.lineedit.setText(_translate("MainWindow", "9"))
        self.label100.setText(_translate("MainWindow", "Modes"))
        self.pushbuttonzoom.setText(_translate("MainWindow", "Zoom"))


def show_exit_confirmation(event):
         msg_box = QtWidgets.QMessageBox()
         icon1 = QtGui.QIcon()
         icon1.addPixmap(QtGui.QPixmap(image_icon_path), QtGui.QIcon.Normal, QtGui.QIcon.Off)
         msg_box.setWindowTitle("MzDOCK")
         msg_box.setWindowIcon(icon1)
         msg_box.setIconPixmap(QtGui.QPixmap(image_icon_path))
         msg_box.setText("Are you sure you want to exit?")
         msg_box.setStandardButtons(QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No)

         reply = msg_box.exec_()
         if reply == QtWidgets.QMessageBox.Yes:
           QtWidgets.QApplication.quit()
         else:
           event.ignore()




class Ui_Dialog(UI_MainWindow):
      def setupUi(self, Dialog):
        
        
        
 
        Dialog.setObjectName("Dialog")
        Dialog.resize(494, 360)
        Dialog.setMaximumSize(QtCore.QSize(494, 360))
        self.labelph = QtWidgets.QLabel(Dialog)
        self.labelph.setGeometry(QtCore.QRect(350, 320, 80, 16))
        
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.labelph.setFont(font)
        self.lineeditph = QtWidgets.QLineEdit(Dialog)
        self.lineeditph.setGeometry(QtCore.QRect(380, 305, 40, 35))
       

        self.labelmol = QtWidgets.QLabel(Dialog)
        self.labelmol.setGeometry(QtCore.QRect(30, 320, 80, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.labelmol.setFont(font)
        def smidialog():
              odir, _ = QFileDialog.getOpenFileName(None, "Choose Your SMILES", "", 'SMILES(*.smi)')
              if not odir:
                  error = "You Did Not Choose The SMILES"
                  QMessageBox.critical(Dialog, "MzDOCK", error)
              else:
                  if radio.isChecked():
                    
                        with open(odir, 'r') as file:
                             smiles = []
                             for line in file:
                               smiles.append(line.split('\n')[0])
                                
                           
                              
                               for idx, one in enumerate(smiles):
                                    alpha = one.split()
                                    if len(alpha) == 2:
                                      basename = one.split()[1]
                                    else:
                                       basename = "SMILES"
                                    mol = Chem.MolFromSmiles(one)
                                    if mol:
                                            force = self.lineeditx.currentText()
                                            options = EnumerateStereoisomers.StereoEnumerationOptions(tryEmbedding=True)
                                            isomers = tuple(EnumerateStereoisomers.EnumerateStereoisomers(mol, options=options))
                                            
                                            for idx, smi in enumerate(isomers):
                                                print("Generating Isomers..........")
                                                outputfile = os.path.join(isomerdir, f"{basename}_{idx}_isomer.sdf")
                                                w = Chem.SDWriter(outputfile)
                                                w.write(smi)
                                            w.close()
                             protonation = self.lineeditph.text()
                             try:
                                prot = float(protonation)
                                if not isinstance(prot, (int, float)):
                                   raise ValueError("Please provide numerical values (Int or Float)")
                                if prot > 14:
                                   raise ValueError("pH should not be more than 14")
                                if prot < 1:
                                   raise ValueError("pH should be between 1 and 14")
                                else:
                                   force = self.lineeditx.currentText()
                                   ligand_preparation = ligand_prep_path
                                   batch_dir = os.path.dirname(ligand_preparation)
                                   os.chdir(batch_dir)
                                   print(f"Taking pH as {protonation}")
                                   list = [ligand_preparation, force, protonation]
                                   subprocess.call(list, shell= True)    
                                      
                                   QMessageBox.information(Dialog, "MzDOCK", "Succesfully Prepared")
                                   dialogx.close()
                                   button1.setEnabled(False)
                                   button2.setEnabled(True)
                                   labelx.setEnabled(True)
                             except ValueError as e:
                               QMessageBox.warning(Dialog, "MzDOCK", str(e))
                               
                                
                                
                                   
                             
                                            
                                      
                              
                                      
                  else: 
              
                  
                    
                    with open(odir, 'r') as file:
                          smiles = []
                          for line in file:
                               smiles.append(line.split('\n')[0])
                               
                                                                                                                                                                                    

                              
                               for idx, one  in enumerate(smiles):
                                  alpha = one.split()
                                  if len(alpha) == 2:
                                   basename = one.split()[1]
                                   print(basename)
                                  
                                   outputfile = os.path.join(isomerdir, f"{basename}.sdf")
                                      
                                   w = Chem.SDWriter(outputfile)
                                   mol = Chem.MolFromSmiles(one)
                                   if mol:
                                      w.write(mol)
                                   w.close()
                                  else:
                                      outputfile = os.path.join(isomerdir, f"SMILES{idx}.sdf")
                                      
                                      w = Chem.SDWriter(outputfile)
                                      mol = Chem.MolFromSmiles(one)
                                      if mol:
                                          w.write(mol)
                                      w.close()
                          protonation = self.lineeditph.text()
                          try:
                                prot = float(protonation)
                                if not isinstance(prot, (int, float)):
                                   raise ValueError("Please provide numerical values (Int or Float)")
                                if prot > 14:
                                   raise ValueError("pH should not be more than 14")
                                if prot < 1:
                                   raise ValueError("pH should be between 1 and 14") 
                                else:                   
                                  force = self.lineeditx.currentText()
                                  ligand_preparation = ligand_prep_path
                                  batch_dir = os.path.dirname(ligand_preparation)
                                  os.chdir(batch_dir)
                                  print(f"Taking pH as {protonation}")
                                  list = [ligand_preparation, force, protonation]
                                  subprocess.call(list, shell= True)    
                                    
                                  QMessageBox.information(Dialog, "MzDOCK", "Succesfully Prepared")
                                  dialogx.close()
                                  button1.setEnabled(False)
                                  button2.setEnabled(True)
                                  labelx.setEnabled(True)
                          except ValueError as e:
                               QMessageBox.warning(Dialog, "MzDOCK", str(e))
                               
                                
                                
                    
                    
                   
        self.pushbuttonsmi = QtWidgets.QPushButton(Dialog)
        self.pushbuttonsmi.setGeometry(QtCore.QRect(370, 90, 93, 28))
        self.pushbuttonsmi.clicked.connect(smidialog)

              
        def moldialog():
             odir, _ = QFileDialog.getOpenFileNames(None, "Choose Your Ligands", "", 'MDL Molfiles (*.mol)')
             if not odir:
              error = "You Did Not Choose The Ligands"
              QMessageBox.critical(Dialog, "MzDOCK", error)
             else:
                for file_path in odir:
                  file_name = os.path.basename(file_path)
                  dest = ligand_prep_move_path
                  dest_path = os.path.join(dest, file_name)
                  shutil.copy(file_path, dest_path)
                info ="Succesfully Selected The Ligands"
                QMessageBox.information(Dialog, "MzDOCK", info)
                self.pushButtona.setEnabled(False)
                self.pushButton_a2.setEnabled(False)
                self.pushbuttonpdb.setEnabled(False)
                self.pushButton_a4.setEnabled(False)
                self.pushButtonmolact.setEnabled(True)
                self.pushbuttonmol.setEnabled(False)

          
             
        def activatemol():
             protonation = self.lineeditph.text()
             try:
                  prot = float(protonation)
                  if not isinstance(prot, (int, float)):
                    raise ValueError("Please provide numerical values (Int or Float)")
                  if prot > 14:
                    raise ValueError("pH should not be more than 14")
                  if prot < 1:
                    raise ValueError("pH should be between 1 and 14") 
                  else:
                    force = self.lineeditx.currentText()
                    ligand_preparation = ligandmol
                    batch_dir = os.path.dirname(ligand_preparation)
                    os.chdir(batch_dir)
                    list = [ligand_preparation, force, protonation]
                    subprocess.call(list, shell= True)
                    button1.setEnabled(False)
                    button2.setEnabled(True)
                    labelx.setEnabled(True)
                    
                    info = "The Ligands Are Succesfully Prepared And Is Ready To Dock"
                    
                    QMessageBox.information(Dialog, "MzDOCK", info)
                    dialogx.close()
             except ValueError as e:
                QMessageBox.warning(Dialog, "MzDOCK", str(e))
                    
           
        
        
        self.pushbuttonmol = QtWidgets.QPushButton(Dialog)
        self.pushbuttonmol.setGeometry(QtCore.QRect(90, 310, 93, 28))
        self.pushbuttonmol.clicked.connect(moldialog)
        self.pushButtonmolact = QtWidgets.QPushButton(Dialog)
        self.pushButtonmolact.setGeometry(QtCore.QRect(200, 310, 93, 28))
        self.pushButtonmolact.setEnabled(False)
        self.pushButtonmolact.clicked.connect(activatemol)
        self.labelenatio = QtWidgets.QLabel(Dialog)
        self.labelenatio.setGeometry(QtCore.QRect(300, 20, 80, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.labelenatio.setFont(font)
        self.radio = QtWidgets.QRadioButton(Dialog)
        self.radio.setGeometry(QtCore.QRect(385, 17, 20, 20))
        global radio
        radio = self.radio
        

        self.labelff = QtWidgets.QLabel(Dialog)
        self.labelff.setGeometry(QtCore.QRect(100, 20, 80, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.labelff.setFont(font)
        self.lineeditx = QtWidgets.QComboBox(Dialog)
        self.lineeditx.setGeometry(QtCore.QRect(185, 10, 100, 31))
        self.lineeditx.addItem("")
        self.lineeditx.addItem("")
        self.lineeditx.addItem("")
        self.lineeditx.addItem("")
        self.lineeditx.addItem("")
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(30, 70, 55, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.lineEdit = QtWidgets.QLineEdit(Dialog)
        self.lineEdit.setGeometry(QtCore.QRect(90, 60, 271, 31))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit.setText("c1ccccc1")
        self.label_2 = QtWidgets.QLabel(Dialog)
        self.label_2.setGeometry(QtCore.QRect(30, 140, 55, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        def mol2dialog():
           
           odir, _ = QFileDialog.getOpenFileNames(None, "Choose Your Ligands", "", 'MDL Molfiles (*.mol2)')
           if not odir:
             error = "You Did Not Choose The Ligands"
             QMessageBox.critical(Dialog, "MzDOCK", error)
             
           else:   
             for file_path in odir:
              file_name = os.path.basename(file_path)
              dest = ligand_prep_move_path
              dest_path = os.path.join(dest, file_name)
              shutil.copy(file_path, dest_path)
             info ="Succesfully Selected The Ligands"
             QMessageBox.information(Dialog, "MzDOCK", info)
             self.pushButtona.setEnabled(False)
             self.pushButton_a2.setEnabled(True)
             self.pushbuttonpdb.setEnabled(False)
             self.pushButton_a4.setEnabled(False)
             self.pushbuttonmol.setEnabled(False)
             
             
             


        def activate_bat1():
             
             protonation = self.lineeditph.text()
             try:
                prot = float(protonation)
                if not isinstance(prot, (int, float)):
                  raise ValueError("Please provide numerical values (Int or Float)")
                if prot > 14:
                  raise ValueError("pH should not be more than 14")
                if prot < 1:
                  raise ValueError("pH should be between 1 and 14") 
                else:
                  force = self.lineeditx.currentText()
                  ligand_preparation = ligand_mol2_path
                  batch_dir = os.path.dirname(ligand_preparation)
                  os.chdir(batch_dir)
                  list = [ligand_preparation, force, protonation]
                  subprocess.call(list, shell= True)
                  button1.setEnabled(False)
                  button2.setEnabled(True)
                  labelx.setEnabled(True)
                  
                  info = "The Ligands Are Succesfully Prepared And Is Ready To Dock"
                  
                  QMessageBox.information(Dialog, "MzDOCK", info)
                  dialogx.close()
             except ValueError as e:
                QMessageBox.warning(Dialog, "MzDOCK", str(e))


        
        self.pushButtona = QtWidgets.QPushButton(Dialog)
        self.pushButtona.setGeometry(QtCore.QRect(90, 130, 93, 28))
        self.pushButtona.setObjectName("pushButton")
        self.pushButtona.clicked.connect(mol2dialog)
        self.pushButton_a2 = QtWidgets.QPushButton(Dialog)
        self.pushButton_a2.setGeometry(QtCore.QRect(200, 130, 93, 28))
        self.pushButton_a2.setObjectName("pushButton_2")
        self.pushButton_a2.clicked.connect(activate_bat1)
        self.pushButton_a2.setEnabled(False)
      
        def smiles():
           text1 = self.lineEdit.text()
           if self.radio.isChecked():
              mol = Chem.MolFromSmiles(text1)
              if mol is None:
               QMessageBox.warning(Dialog, "MzDOCK", "Invalid SMILES String")
              else:
               force = self.lineeditx.currentText()
               options = EnumerateStereoisomers.StereoEnumerationOptions(tryEmbedding=True)
               isomers = tuple(EnumerateStereoisomers.EnumerateStereoisomers(
                         mol, 
                         options=options)
                         )
               length = len(isomers)
               print(f"The number of isomers was found to be {length}")
               
               for idx, smiles in enumerate(isomers):
                  outputfile = os.path.join(isomerdir, f"SMILES_{idx}_isomer.sdf")
                  w = Chem.SDWriter(outputfile)
                  w.write(smiles)
               w.close()
               protonation = self.lineeditph.text()
               try:
                  prot = float(protonation)
                  if not isinstance(prot, (int, float)):
                    raise ValueError("Please provide numerical values (Int or Float)")
                  if prot > 14:
                    raise ValueError("pH should not be more than 14")
                  if prot < 1:
                    raise ValueError("pH should be between 1 and 14") 
                  else:
                    ligand_preparation = ligand_prep_path
                    batch_dir = os.path.dirname(ligand_preparation)
                    os.chdir(batch_dir)
                    list = [ligand_preparation, force, protonation]
                    subprocess.call(list, shell= True)
                      
                      
                    QMessageBox.information(Dialog, "MzDOCK", "Succesfully Prepared")
                    dialogx.close()
                    button1.setEnabled(False)
                    button2.setEnabled(True)
                    labelx.setEnabled(True)
               except ValueError as e:
                QMessageBox.warning(Dialog, "MzDOCK", str(e))
              
                    

              
              
           
           
           
           else: 
            text1 = self.lineEdit.text()
            try:
              
              mol = Chem.MolFromSmiles(text1)
              if mol is None:
                QMessageBox.warning(Dialog, "MzDOCK", "Invalid SMILES String")
              else:
                force = self.lineeditx.currentText()
                mol = Chem.AddHs(mol)
                AllChem.EmbedMolecule(mol)
                AllChem.UFFOptimizeMolecule(mol)

                w = Chem.SDWriter(pathsmiles)
                w.write(mol)
                w.close()
                protonation = self.lineeditph.text()
                try:
                  prot = float(protonation)
                  if not isinstance(prot, (int, float)):
                    raise ValueError("Please provide numerical values (Int or Float)")
                  if prot > 14:
                    raise ValueError("pH should not be more than 14")
                  if prot < 1:
                    raise ValueError("pH should be between 1 and 14") 
                  else:

                    ligand_preparation = ligand_prep_path
                    batch_dir = os.path.dirname(ligand_preparation)
                    os.chdir(batch_dir)
                    list = [ligand_preparation, force, protonation]
                    subprocess.call(list, shell= True)
                  
                  
                    QMessageBox.information(Dialog, "MzDOCK", "Succesfully Prepared")
                    dialogx.close()
                    button1.setEnabled(False)
                    button2.setEnabled(True)
                    labelx.setEnabled(True)
                except ValueError as e:
                 QMessageBox.warning(Dialog, "MzDOCK", str(e))
                    
                
                  

                
                
            except subprocess.CalledProcessError as e:
              print("Error occurred:", e)
            except ValueError as e:
                
                QMessageBox.warning(Dialog, "MzDOCK", str(e))
              
        
            
           
           
           
          
           
           
          
           
           
           
        
        self.pushButton_a3 = QtWidgets.QPushButton(Dialog)
        self.pushButton_a3.setGeometry(QtCore.QRect(370, 60, 93, 28))
        self.pushButton_a3.setObjectName("pushButton_3")
        self.pushButton_a3.clicked.connect(smiles)
        self.label_3 = QtWidgets.QLabel(Dialog)
        self.label_3.setGeometry(QtCore.QRect(30, 200, 55, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.labelpdb = QtWidgets.QLabel(Dialog)
        self.labelpdb.setGeometry(QtCore.QRect(30, 260, 55, 16))
        self.labelpdb.setObjectName("pd")
        font.setBold(True)
        font.setWeight(75)
        self.labelpdb.setFont(font)
        def sdfdialog():
           odir, _ = QFileDialog.getOpenFileNames(None, "Choose Your Ligands", "", 'Structure Data Files (*.sdf)')
           if not odir:
             error = "You Did Not Choose The Ligands"
             QMessageBox.critical(Dialog, "MzDOCK", error)
             
           else:   
             for file_path in odir:
              file_name = os.path.basename(file_path)
              dest = ligand_prep_move_path
              dest_path = os.path.join(dest, file_name)
              shutil.copy(file_path, dest_path)
             info ="Succesfully Selected The Ligands"
             QMessageBox.information(Dialog, "MzDOCK", info)
             self.pushButton_a4.setEnabled(False)
             self.pushButton_a5.setEnabled(True)
             self.pushbuttonpdb.setEnabled(False)
             self.pushbuttonmol.setEnabled(False)
             
             self.pushButtona.setEnabled(False)

        def activate_bat():
             protonation = self.lineeditph.text()
             try:
                  prot = float(protonation)
                  if not isinstance(prot, (int, float)):
                    raise ValueError("Please provide numerical values (Int or Float)")
                  if prot > 14:
                    raise ValueError("pH should not be more than 14")
                  if prot < 1:
                    raise ValueError("pH should be between 1 and 14") 
                  else:
                    force = self.lineeditx.currentText()
                    ligand_preparation = ligand_prep_path
                    batch_dir = os.path.dirname(ligand_preparation)
                    os.chdir(batch_dir)
                    list = [ligand_preparation, force, protonation]
                    subprocess.call(list, shell= True)
                    button1.setEnabled(False)
                    button2.setEnabled(True)
                    labelx.setEnabled(True)
                    dialogx.close()
                    info = "The Ligands Are Succesfully Prepared And Is Ready To Dock"
                    
                    QMessageBox.information(Dialog, "MzDOCK", info)
             except ValueError as e:
                 QMessageBox.warning(Dialog, "MzDOCK", str(e))

             
           
        
        
        
        
        self.pushButton_a4 = QtWidgets.QPushButton(Dialog)
        self.pushButton_a4.setGeometry(QtCore.QRect(90, 190, 93, 28))
        self.pushButton_a4.setObjectName("pushButton_4")
        self.pushButton_a4.clicked.connect(sdfdialog)
        def pdbinput():
           odir, _ = QFileDialog.getOpenFileNames(None, "Choose Your Ligands", "", 'Protein Data Bank Files (*.pdb)')
           if not odir:
             error = "You Did Not Choose The Ligands"
             QMessageBox.critical(Dialog, "MzDOCK", error)
             
           else:   
             for file_path in odir:
              file_name = os.path.basename(file_path)
              dest = ligand_prep_move_path
              dest_path = os.path.join(dest, file_name)
              shutil.copy(file_path, dest_path)
             info ="Succesfully Selected The Ligands"
             QMessageBox.information(Dialog, "MzDOCK", info)
             self.pushbuttonact.setEnabled(True)
             self.pushbuttonpdb.setEnabled(False)
             self.pushButton_a4.setEnabled(False)
             self.pushButtona.setEnabled(False)
             self.pushbuttonmol.setEnabled(False)

        def activatepdb():
             protonation = self.lineeditph.text()
             try:
                  prot = float(protonation)
                  if not isinstance(prot, (int, float)):
                    raise ValueError("Please provide numerical values (Int or Float)")
                  if prot > 14:
                    raise ValueError("pH should not be more than 14")
                  if prot < 1:
                    raise ValueError("pH should be between 1 and 14") 
                  else:
           
                    force = self.lineeditx.currentText()
                    batch_dir = os.path.dirname(pdbligandpath)
                    os.chdir(batch_dir)
                    list =[pdbligandpath, force, protonation]
                    subprocess.call(list, shell=True)
                  
                    
                    
                    button1.setEnabled(False)
                    button2.setEnabled(True)
                    labelx.setEnabled(True)
                    dialogx.close()
                    info = "The Ligands Are Succesfully Prepared And Is Ready To Dock"
                            
                    QMessageBox.information(Dialog, "MzDOCK", info)
             except ValueError as e:
                QMessageBox.warning(Dialog, "MzDOCK", str(e))
                        
           
        
        
        self.pushbuttonpdb = QtWidgets.QPushButton(Dialog)
        self.pushbuttonpdb.setGeometry(QtCore.QRect(90, 250, 93, 28))
        self.pushbuttonpdb.setObjectName("pdb")
        self.pushbuttonpdb.clicked.connect(pdbinput)

        self.pushbuttonact = QtWidgets.QPushButton(Dialog)
        self.pushbuttonact.setGeometry(QtCore.QRect(200, 250, 93, 28))
        self.pushbuttonact.setObjectName("pdbx")
        self.pushbuttonact.setEnabled(False)
        self.pushbuttonact.clicked.connect(activatepdb)

        self.pushButton_a5 = QtWidgets.QPushButton(Dialog)
        self.pushButton_a5.setGeometry(QtCore.QRect(200, 190, 93, 28))
        self.pushButton_a5.setObjectName("pushButton_5")
        self.pushButton_a5.setEnabled(False)
        self.pushButton_a5.clicked.connect(activate_bat)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

      def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "MzDOCK"))
        self.label.setText(_translate("Dialog", "SMILES"))
        self.label_2.setText(_translate("Dialog", "Mol2"))
        self.pushButtona.setText(_translate("Dialog", "Select"))
        self.pushButton_a2.setText(_translate("Dialog", "Prepare"))
        self.pushButton_a3.setText(_translate("Dialog", "Ok"))
        self.label_3.setText(_translate("Dialog", "SDF"))
        self.pushButton_a4.setText(_translate("Dialog", "Select"))
        self.pushButton_a5.setText(_translate("Dialog", "Prepare"))
        self.pushbuttonpdb.setText(_translate("Dialog", "Select"))
        self.labelpdb.setText(_translate("Dialog", "PDB"))
        self.pushbuttonact.setText(_translate("Dialog", "Prepare"))
        self.labelff.setText(_translate("Dialog", "Forcefield"))
        self.lineeditx.setItemText(0, _translate("Dialog", "MMFF94"))
        self.lineeditx.setItemText(1, _translate("Dialog", "MMFF94s"))
        self.lineeditx.setItemText(2, _translate("Dialog", "GAFF"))
        self.lineeditx.setItemText(3, _translate("Dialog", "Ghemical"))
        self.lineeditx.setItemText(4, _translate("Dialog", "UFF"))
        self.labelenatio.setText(_translate("Dialog", "Enantiomers"))
        self.labelmol.setText(_translate("Dialog", "Mol"))
        self.pushbuttonmol.setText(_translate("Dialog", "Select"))
        self.pushButtonmolact.setText(_translate("Dialog", "Prepare"))
        self.pushbuttonsmi.setText(_translate("Dialog", ".smi"))
        self.labelph.setText(_translate("Dialog", "pH"))
        self.lineeditph.setText(_translate("Dialog", "7"))
        


class Dialog(QtWidgets.QDialog):
    def __init__(self, parent=None):
        super(Dialog, self).__init__(parent)
        self.ui = Ui_Dialog()
        self.ui.setupUi(self)
        self.setWindowTitle("MzDOCK")
        

    global dialog1
    def dialog1():
      app = QtWidgets.QApplication.instance()
      if app is None:
        app = QtWidgets.QApplication([])

      global dialogx
      dialogx = Dialog()
      dialogx.setWindowTitle("MzDOCK")
      dialogx.setWindowIcon(icon)
      dialogx.exec_()
    def closeEvent(self, event):
        # Finalize the VTK render window before closing the dialog
           subprocess.call(refresh_activate_path, shell=True)
           event.accept()
class Ui_Dialog1(UI_MainWindow):
     def setupUi1(self, Dialog2):
        Dialog2.setObjectName("Dialog")
        Dialog2.resize(402, 241)
        Dialog2.setMinimumSize(QtCore.QSize(402, 241))
        Dialog2.setMaximumSize(QtCore.QSize(402, 241))
        self.label = QtWidgets.QLabel(Dialog2)
        self.label.setGeometry(QtCore.QRect(50, 30, 101, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(Dialog2)
        self.label_2.setGeometry(QtCore.QRect(50, 60, 55, 16))
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(Dialog2)
        self.label_3.setGeometry(QtCore.QRect(70, 110, 81, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(Dialog2)
        self.label_4.setGeometry(QtCore.QRect(70, 70, 81, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(Dialog2)
        self.label_5.setGeometry(QtCore.QRect(37, 150, 130, 21))
        self.label_5.setText("Ligands/Ions")
        self.label_5.setObjectName("label_5")
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        global prepare_pdb_split_alt_confs
        def prepare_pdb_split_alt_confs(input_filename, output_pdb_stem=None):
          def hasAt(name):
              return '@' in name

          def getAT_types(m):
              AT_SET = m.allAtoms.get(lambda x: hasAt(x.name))
              AT_SET_SET = set(AT_SET.name)
              alt_items = {}
              for ent in AT_SET_SET:
                  alt_items[ent.split("@")[1]] = 1
              return list(alt_items.keys())

          if not os.path.isfile(input_filename):
              print(f"File '{input_filename}' does not exist.")
              return

          file_stem = input_filename.split('.')[0]
          if output_pdb_stem:
              file_stem = output_pdb_stem

          mols = Read(input_filename)
          if not len(mols):
              print(f"Problem reading file: {input_filename}! Unable to continue.")
              return

          mol = mols[0]
          if len(mols) > 1:
              for m in mols[1:]:
                  if len(m.allAtoms) > len(mol.allAtoms):
                      mol = m

          alt_loc_ats = mol.allAtoms.get(lambda x: "@" in x.name)
          if not alt_loc_ats:
              print(f"No alternate location atoms found in {input_filename}")
              return

          list_to_write = getAT_types(mol)
          ATOMLINES = mol.parser.getAtomsLines(-2, 0)

          for altT in list_to_write:
              fn = f"{file_stem}_{altT}.pdb"
              with open(fn, 'w') as fptr:
                  ctr = 1
                  for ll in ATOMLINES:
                      if ll[16] == altT or ll[16] == ' ':
                          newL = ll[:6] + f"%5d" % ctr + ll[11:16] + " " + ll[17:]
                          ctr += 1
                          fptr.write(newL + '\n')
        def is_het(residue):
         res = residue.id[0]
         return res not in (" ", "W")

        def extract_ligands_from_pdb(pdb_path, output_directory):
    # Create a directory to store extracted ligands
  

          # Parse the provided PDB file
          pdb_file = os.path.basename(pdb_path)
          pdb_id = os.path.splitext(pdb_file)[0].upper()
          
          pdb = PDBParser().get_structure(pdb_id, pdb_path)
          
          io = PDBIO()

          # Iterate through the PDB file to extract ligands
          for model in pdb:
              for chain in model:
                  for residue in chain:
                      if is_het(residue):
                          ligand_id = residue.id[1]
                          ligand_filename = f"{pdb_id}_Lig_{ligand_id}.pdb"
                          ligand_path = os.path.join(output_directory, ligand_filename)

                          # Save the ligand as a separate PDB file
                          io.set_structure(residue)
                          io.save(ligand_path)

                          print(f"Ligand {ligand_id} extracted and saved as {ligand_filename}")

        def prepoptions():
           
           selectedH = self.comboBox.currentText()
           selectedQ = self.comboBox_2.currentText()
           selectedC = self.comboBox_3.currentText()
           selectedD = self.comboBox_4.currentText()
           global H
           H = self.H.get(selectedH, "")
           global Q
           Q = self.Q.get(selectedQ, "")
           global C
           C = self.C.get(selectedC, "")
           global D
           D = self.D.get(selectedD, "")
          
           if os.path.exists(chain):
             receptor = chain
             print(receptor)
              
             extract_ligands_from_pdb(chain, output_folder)
             try:
                 mol = Read(receptor)[0]
             except IndexError:
                QMessageBox.warning(Dialog2, "MzDOCK", "Cant Read Protein with Molkit")
                dialogxx.close()
                return 
             mol.buildBondsByDistance() 
             alt_loc_ats = mol.allAtoms.get(lambda x: "@" in x.name)
             len_alt_loc_ats = len(alt_loc_ats)
             if len_alt_loc_ats:
                  print("WARNING!", mol.name, "has",len_alt_loc_ats, ' alternate location atoms!')
                  prepare_pdb_split_alt_confs(receptor, output_pdb_stem=output_folder)
                  
                  molecule = Read(updated)[0]
                  molecule.buildBondsByDistance()
                  
                  output1 = propath
                  if selectedD == "Keep Ions Only":
                      RPO = AD4ReceptorPreparation(molecule,
                                          repairs= str(H), 
                                          cleanup= str(C) ,
                                          charges_to_add= str(Q), 
                                          keepions=True,
                                          outputfilename= output1
                                        )    
                      
                      button2.setEnabled(False)
                      button3.setEnabled(False)
                      labelxx.setEnabled(True)
                      info = "Protein Preparation is Completed"
                      QMessageBox.information(Dialog2, "MzDOCK", info)
                      button4.setEnabled(True)
                      button5.setEnabled(True)
                      dialogxx.close()
                  elif selectedD == "Manual":
                      dialogii()
                      RPO = AD4ReceptorPreparation(molecule,
                                          repairs= str(H), 
                                          cleanup= str(C) ,
                                          charges_to_add= str(Q), 
                                          delete_single_nonstd_residues=True,
                                          outputfilename= output1
                                        )    
                      button2.setEnabled(False)
                      button3.setEnabled(False)
                      labelxx.setEnabled(True)
                      info = "Protein Preparation is Completed"
                      QMessageBox.information(Dialog2, "MzDOCK", info)
                      button4.setEnabled(True)
                      button5.setEnabled(True)
                      dialogxx.close()
            
            
                      
                  else:
                      RPO = AD4ReceptorPreparation(molecule,
                                          repairs= str(H), 
                                          cleanup= str(C) ,
                                          charges_to_add= str(Q), 
                                          delete_single_nonstd_residues= D,
                                          outputfilename= output1
                                        )                 
                      button2.setEnabled(False)
                      button3.setEnabled(False)
                      labelxx.setEnabled(True)
                      info = "Protein Preparation is Completed"
                      QMessageBox.information(Dialog2, "MzDOCK", info)
                      button4.setEnabled(True)
                      button5.setEnabled(True)
                      dialogxx.close()
                  
             else:
                output1 = propath
                if selectedD == "Keep Ions Only":
                    RPO = AD4ReceptorPreparation(mol,
                                      repairs= str(H), 
                                      cleanup= str(C) ,
                                      charges_to_add= str(Q), 
                                      keepions=True,
                                      outputfilename= output1
                                    )                 
                    button2.setEnabled(False)
                    button3.setEnabled(False)
                    labelxx.setEnabled(True)
                    info = "Protein Preparation is Completed"
                    QMessageBox.information(Dialog2, "MzDOCK", info)
                    button4.setEnabled(True)
                    button5.setEnabled(True)
                    dialogxx.close()
                elif selectedD == "Manual":
                  dialogii()
                  RPO = AD4ReceptorPreparation(mol,
                                      repairs= str(H), 
                                      cleanup= str(C) ,
                                      charges_to_add= str(Q), 
                                      delete_single_nonstd_residues= D,
                                      outputfilename= output1
                                    )                 
                  button2.setEnabled(False)
                  button3.setEnabled(False)
                  labelxx.setEnabled(True)
                  info = "Protein Preparation is Completed"
                  QMessageBox.information(Dialog2, "MzDOCK", info)
                  button4.setEnabled(True)
                  button5.setEnabled(True)
                  dialogxx.close()
                  
                    
                else:
                  RPO = AD4ReceptorPreparation(mol,
                              repairs= str(H), 
                              cleanup= str(C) ,
                              charges_to_add= str(Q), 
                              delete_single_nonstd_residues= D,
                              outputfilename= output1
                                    )                 
                  button2.setEnabled(False)
                  button3.setEnabled(False)
                  labelxx.setEnabled(True)
                  info = "Protein Preparation is Completed"
                  QMessageBox.information(Dialog2, "MzDOCK", info)
                  button4.setEnabled(True)
                  button5.setEnabled(True)
                  dialogxx.close()
                 
           else:
              extract_ligands_from_pdb(pro, output_folder)
              receptor = pro
              print(receptor)

           
           
              try:
                  mol = Read(receptor)[0]
                  
              except IndexError:
                 QMessageBox.warning(Dialog2, "MzDOCK", "Cant Read Protein with Molkit")
                 dialogxx.close()
                 return
                 
            
              mol.buildBondsByDistance() 
              alt_loc_ats = mol.allAtoms.get(lambda x: "@" in x.name)
              len_alt_loc_ats = len(alt_loc_ats)
              if len_alt_loc_ats:
                print("WARNING!", mol.name, "has",len_alt_loc_ats, ' alternate location atoms!')
                prepare_pdb_split_alt_confs(receptor, output_pdb_stem=output_folder)
                
                molecule = Read(updated)[0]
                molecule.buildBondsByDistance()
                
                output1 = propath
                if selectedD == "Keep Ions Only":
                    RPO = AD4ReceptorPreparation(molecule,
                                        repairs= str(H), 
                                        cleanup= str(C) ,
                                        charges_to_add= str(Q), 
                                        keepions=True,
                                        outputfilename= output1
                                      )    
                
                    button2.setEnabled(False)
                    button3.setEnabled(False)
                    labelxx.setEnabled(True)
                    info = "Protein Preparation is Completed"
                    QMessageBox.information(Dialog2, "MzDOCK", info)
                    button4.setEnabled(True)
                    button5.setEnabled(True)
                    dialogxx.close()
                elif selectedD == "Manual":
                    dialogii()
                    RPO = AD4ReceptorPreparation(molecule,
                                        repairs= str(H), 
                                        cleanup= str(C) ,
                                        charges_to_add= str(Q), 
                                        delete_single_nonstd_residues=True,
                                        outputfilename= output1
                                      )    
                    button2.setEnabled(False)
                    button3.setEnabled(False)
                    labelxx.setEnabled(True)
                    info = "Protein Preparation is Completed"
                    QMessageBox.information(Dialog2, "MzDOCK", info)
                    button4.setEnabled(True)
                    button5.setEnabled(True)
                    dialogxx.close()
              
              
                
                else:
                    RPO = AD4ReceptorPreparation(molecule,
                                        repairs= str(H), 
                                        cleanup= str(C) ,
                                        charges_to_add= str(Q), 
                                        delete_single_nonstd_residues= D,
                                        outputfilename= output1
                                      )                 
                    button2.setEnabled(False)
                    button3.setEnabled(False)
                    labelxx.setEnabled(True)
                    info = "Protein Preparation is Completed"
                    QMessageBox.information(Dialog2, "MzDOCK", info)
                    button4.setEnabled(True)
                    button5.setEnabled(True)
                    dialogxx.close()
                
              else:
                output1 = propath
                if selectedD == "Keep Ions Only":
                    RPO = AD4ReceptorPreparation(mol,
                                      repairs= str(H), 
                                      cleanup= str(C) ,
                                      charges_to_add= str(Q), 
                                      keepions=True,
                                      outputfilename= output1
                                    )                 
                    button2.setEnabled(False)
                    button3.setEnabled(False)
                    labelxx.setEnabled(True)
                    info = "Protein Preparation is Completed"
                    QMessageBox.information(Dialog2, "MzDOCK", info)
                    button4.setEnabled(True)
                    button5.setEnabled(True)
                    dialogxx.close()
                elif selectedD == "Manual":
                  dialogii()
                  RPO = AD4ReceptorPreparation(mol,
                                      repairs= str(H), 
                                      cleanup= str(C) ,
                                      charges_to_add= str(Q), 
                                      delete_single_nonstd_residues= D,
                                      outputfilename= output1
                                    )                 
                  button2.setEnabled(False)
                  button3.setEnabled(False)
                  labelxx.setEnabled(True)
                  info = "Protein Preparation is Completed"
                  QMessageBox.information(Dialog2, "MzDOCK", info)
                  button4.setEnabled(True)
                  button5.setEnabled(True)
                  dialogxx.close()
                 
                    
                else:
                  RPO = AD4ReceptorPreparation(mol,
                                      repairs= str(H), 
                                      cleanup= str(C) ,
                                      charges_to_add= str(Q), 
                                      delete_single_nonstd_residues= D,
                                      outputfilename= output1
                                    )                 
                  button2.setEnabled(False)
                  button3.setEnabled(False)
                  labelxx.setEnabled(True)
                  info = "Protein Preparation is Completed"
                  QMessageBox.information(Dialog2, "MzDOCK", info)
                  button4.setEnabled(True)
                  button5.setEnabled(True)
                  dialogxx.close()
                  
                    
              

           
        self.comboBox = QtWidgets.QComboBox(Dialog2)
        self.comboBox.setGeometry(QtCore.QRect(190, 30, 151, 22))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.H = { 
                   "Add Hydrogens": "hydrogens",
                   "Check Hydrogens": "checkhydrogens"                  
        }



        self.comboBox_2 = QtWidgets.QComboBox(Dialog2)
        self.comboBox_2.setGeometry(QtCore.QRect(190, 70, 151, 22))
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.Q = { 
                  "Kollman": "Kollman",
                  "Gasteiger": "gasteiger"
        }

        self.comboBox_3 = QtWidgets.QComboBox(Dialog2)
        self.comboBox_3.setGeometry(QtCore.QRect(190, 110, 151, 22))
        self.comboBox_3.setObjectName("comboBox_3")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.C = {
                  "Waters": "waters_nphs_nonstdres",
                  "Keep Water": "nphs_nonstdres",
                  }
        self.comboBox_4 = QtWidgets.QComboBox(Dialog2)
        self.comboBox_4.setGeometry(QtCore.QRect(190, 150, 151, 22))
        self.comboBox_4.setObjectName("comboBox4")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")   
        self.comboBox_4.addItem("") 
        self.comboBox_4.addItem("")    
        self.D = {
                  "Delete All": True,
                  "Keep All": False,
                  "Keep Ions Only": "keep",
                  "Manual": "Manual"
           
        }              
        self.pushButton = QtWidgets.QPushButton(Dialog2)
        self.pushButton.setGeometry(QtCore.QRect(60, 200, 93, 28))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(prepoptions)
        

        self.retranslateUi(Dialog2)
        QtCore.QMetaObject.connectSlotsByName(Dialog2)

     def retranslateUi(self, Dialog2):
        _translate = QtCore.QCoreApplication.translate
        Dialog2.setWindowTitle(_translate("Dialog", "MzDOCK"))
        self.label.setText(_translate("Dialog", "Hydrogens"))
        self.label_3.setText(_translate("Dialog", "Clean Up"))
        self.label_4.setText(_translate("Dialog", "Charges"))
        self.comboBox.setItemText(0, _translate("Dialog", "Add Hydrogens"))
        self.comboBox.setItemText(1, _translate("Dialog", "Check Hydrogens"))
        self.comboBox_2.setItemText(0, _translate("Dialog", "Kollman"))
        self.comboBox_2.setItemText(1, _translate("Dialog", "Gasteiger"))
        self.comboBox_3.setItemText(0, _translate("Dialog", "Waters"))
        self.comboBox_3.setItemText(1, _translate("Dialog", "Keep Water"))
        self.comboBox_4.setItemText(0, _translate("Dialog", "Delete All"))
        self.comboBox_4.setItemText(1, _translate("Dialog", "Keep All"))
        self.comboBox_4.setItemText(2, _translate("Dialog", "Keep Ions Only"))
        self.comboBox_4.setItemText(3, _translate("Dialog", "Manual"))
        self.pushButton.setText(_translate("Dialog", "Confirm"))
        

class dialog2(QtWidgets.QDialog):
         def __init__(self, parent=None):
          super(dialog2, self).__init__(parent)
          self.ui = Ui_Dialog1()
          self.ui.setupUi1(self)
          self.setWindowTitle("MzDOCK")
          

         global dialog5
         def dialog5():
           app = QtWidgets.QApplication.instance()
           if app is None:
            app = QtWidgets.QApplication([])

           global dialogxx
           dialogxx = dialog2()
           dialogxx.setWindowTitle("MzDOCK")
           dialogxx.setWindowIcon(icon)
           dialogxx.exec_()
  
class Ui_Dialog2(UI_MainWindow):
    def setupUi2(self, Dialogxxx):
          
          Dialogxxx.setObjectName("Dialog")
          Dialogxxx.resize(806, 648)
          Dialogxxx.setMinimumSize(QtCore.QSize(806, 648))
          Dialogxxx.setMaximumSize(QtCore.QSize(806, 648))
          self.pushflex = QtWidgets.QPushButton(Dialogxxx)
          self.pushflex.setGeometry(QtCore.QRect(700, 560, 93, 28))
          self.pushflex.clicked.connect(dialogflexible)
          def select():
              global bufferspace
              bufferspace = self.lineedit.text()
              odir, _ = QFileDialog.getOpenFileName(None, "Choose Your Co-Crystallized Ligand ", "", 'Protein Data Bank Files (*.pdb)')
              if not odir:
                eror = "Please Choose Your Co-Crystallized PDB File"
                QMessageBox.critical(Dialogxxx, "MzDOCK", eror)
              else:
                dest = select_co_move_path
                shutil.copy(odir, dest)
                button6.setEnabled(True)
                button5.setEnabled(False)
                dialogxxx.close()
                info = "Succesfully Chosen Your Co-Crystallized Ligand"
                QMessageBox.information(widget, "MzDOCK", info)
          self.pushButtonx = QtWidgets.QPushButton(Dialogxxx)
          self.pushButtonx.setGeometry(QtCore.QRect(280, 600, 93, 28))
          self.pushButtonx.setObjectName("pushButtonx")
          self.pushButtonx.clicked.connect(select)
          self.pushButtonxx = QtWidgets.QPushButton(Dialogxxx)
          self.pushButtonxx.setGeometry(QtCore.QRect(700, 600, 93, 28))
          self.pushButtonxx.setObjectName("pushButtonxxx")
          self.pushButtonxx.clicked.connect(dialogfx)
          self.lineedit = QtWidgets.QLineEdit(Dialogxxx)
          self.lineedit.setGeometry(QtCore.QRect(130, 560, 50, 40))
          self.lineedit.setObjectName("lineedit")
          self.labelx = QtWidgets.QLabel(Dialogxxx)
          self.labelx.setGeometry(QtCore.QRect(40, 560, 90, 40))
          self.labelx.setObjectName("label")
          
          
          
          def moveback():
           current_pdb = self.reader.GetFileName()  # Get the current pdb file name being viewed
           pdb_files = [file for file in os.listdir(output_folder) if file.endswith('.pdb')]
            
            # Find the index of the current_pdb in pdb_files
           current_index = pdb_files.index(os.path.basename(current_pdb))

            # Get the next pdb file
           next_index = (current_index - 1) % len(pdb_files)
           next_pdb = pdb_files[next_index]

            # Update the visualization with the next pdb file
           self.reader.SetFileName(os.path.join(output_folder, next_pdb))
           self.ren.ResetCamera()
           self.vtkWidget.GetRenderWindow().Render()
        
          self.pushButton = QtWidgets.QPushButton(Dialogxxx)
          self.pushButton.setGeometry(QtCore.QRect(280, 530, 93, 28))
          font = QtGui.QFont()
          font.setBold(True)
          font.setWeight(75)
          self.pushButton.setFont(font)
          self.pushButton.setObjectName("pushButton")
          self.pushButton.clicked.connect(moveback)
          def move():
           current_pdb = self.reader.GetFileName()  # Get the current pdb file name being viewed
           pdb_files = [file for file in os.listdir(output_folder) if file.endswith('.pdb')]
            
            # Find the index of the current_pdb in pdb_files
           current_index = pdb_files.index(os.path.basename(current_pdb))

            # Get the next pdb file
           next_index = (current_index + 1) % len(pdb_files)
           next_pdb = pdb_files[next_index]

            # Update the visualization with the next pdb file
           self.reader.SetFileName(os.path.join(output_folder, next_pdb))
           self.ren.ResetCamera()
           self.vtkWidget.GetRenderWindow().Render()

          
          self.pushButton_2 = QtWidgets.QPushButton(Dialogxxx)
          self.pushButton_2.setGeometry(QtCore.QRect(380, 530, 93, 28))
          font = QtGui.QFont()
          font.setBold(True)
          font.setWeight(75)
          self.pushButton_2.setFont(font)
          self.pushButton_2.setObjectName("pushButton_2")
          self.pushButton_2.clicked.connect(move)
          def confirm():
             global bufferspace
             bufferspace = self.lineedit.text()
             try:
                  global inputx
                  inputx = int(bufferspace)
             except ValueError:
                  QMessageBox.warning(Dialogxxx, "MzDOCK", "Choose Numerical Value")
             else:
                  if inputx > 10:
                     QMessageBox.warning(Dialogxxx, "MzDOCK", "The Upper Limit Is 10 Angstrom")

                  else:
                  
                  
                  
                        taken = self.reader.GetFileName()
                        dest = select_co_move_path
                        shutil.copy(taken, dest)
                        button6.setEnabled(True)
                        button5.setEnabled(False)
                        info = "Succesfully Chosen Your Co-Crystallized Ligand"
                        QMessageBox.information(Dialogxxx, "MzDOCK", info)
                        dialogxxx.close()
          
          self.pushButton_3 = QtWidgets.QPushButton(Dialogxxx)
          self.pushButton_3.setGeometry(QtCore.QRect(330, 560, 93, 28))
          self.pushButton_3.setObjectName("pushButton_3")
          self.pushButton_3.clicked.connect(confirm)
        
          


          def find_pdb_files(directory):
      
          
  
           for file in os.listdir(directory):
            if file.endswith('.pdb'):
              return os.path.join(directory, file)
       
          def update_visualization():
          
            pdb_file = find_pdb_files(output_folder)
            if pdb_file:
                self.reader.SetFileName(pdb_file)
                self.ribbonFilter = vtkTubeFilter()
                self.ribbonFilter.SetInputConnection(self.reader.GetOutputPort())
                self.ribbonFilter.SetNumberOfSides(50)
                self.ribbonFilter.SetRadius(0.2)

                self.mapper = vtkPolyDataMapper()
                self.mapper.SetInputConnection(self.ribbonFilter.GetOutputPort())

                self.actor = vtkActor()
                self.actor.SetMapper(self.mapper)

                self.ren.AddActor(self.actor)
                self.ren.SetBackground(0, 0, 0)

                self.lighting = vtkLightKit()
                self.lighting.MaintainLuminanceOff()
                self.lighting.AddLightsToRenderer(self.ren)

                self.property = self.actor.GetProperty()
                self.property.SetInterpolationToPhong()
                self.property.SetAmbient(0.2)
                self.property.SetDiffuse(0.8)
                self.property.SetSpecular(0.8)
                self.property.SetSpecularPower(50)

                self.ren.ResetCamera()

                self.vtkWidget.GetRenderWindow().Render()
                self.vtkWidget.GetRenderWindow().SetSize(800, 600)
            else:
                
          # Code to finalize the render window when no file is found
                self.ren.RemoveAllViewProps()  # Remove all actors from the renderer
                self.vtkWidget.GetRenderWindow().Render() 
                self.pushButton.setEnabled(False)
                self.pushButton_2.setEnabled(False)
                self.pushButton_3.setEnabled(False)
                self.pushflex.setEnabled(False)
                
                
          
      
          def init_vtk():
            self.view = QtWidgets.QWidget(Dialogxxx)
            self.view.setGeometry(QtCore.QRect(0, 40, 800, 500))
            self.layout = QtWidgets.QVBoxLayout(self.view)
            
            self.vtkWidget = QVTKRenderWindowInteractor(self.view)
            global molview
            molview = self.vtkWidget
            
            self.layout.addWidget(self.vtkWidget)

            self.ren = vtkRenderer()
            self.vtkWidget.GetRenderWindow().AddRenderer(self.ren)
            self.reader = vtkPDBReader()
            global hans
            hans = self.reader
            
            
            update_visualization()
          init_vtk()
        
       
       
        
          def moveback():
           current_pdb = self.reader.GetFileName()  # Get the current pdb file name being viewed
           pdb_files = [file for file in os.listdir(output_folder) if file.endswith('.pdb')]
            
            # Find the index of the current_pdb in pdb_files
           current_index = pdb_files.index(os.path.basename(current_pdb))

            # Get the next pdb file
           next_index = (current_index - 1) % len(pdb_files)
           next_pdb = pdb_files[next_index]

            # Update the visualization with the next pdb file
           self.reader.SetFileName(os.path.join(output_folder, next_pdb))
           self.ren.ResetCamera()
           self.vtkWidget.GetRenderWindow().Render()
        
          

          def move():
           current_pdb = self.reader.GetFileName()  # Get the current pdb file name being viewed
           pdb_files = [file for file in os.listdir(output_folder) if file.endswith('.pdb')]
            
            # Find the index of the current_pdb in pdb_files
           current_index = pdb_files.index(os.path.basename(current_pdb))

            # Get the next pdb file
           next_index = (current_index + 1) % len(pdb_files)
           next_pdb = pdb_files[next_index]

            # Update the visualization with the next pdb file
           self.reader.SetFileName(os.path.join(output_folder, next_pdb))
           self.ren.ResetCamera()
           self.vtkWidget.GetRenderWindow().Render()

      
        
         
          def blind():
           global bufferspace
           bufferspace = '0'
           dest = select_co_move_path
           shutil.copy(pro, dest)
           button6.setEnabled(True)
           button5.setEnabled(False)
           dialogxxx.close()
           info = "Blind Docking Initialized"
           QMessageBox.information(widget, "MzDOCK", info)
            
          self.pushButton_4 = QtWidgets.QPushButton(Dialogxxx)
          self.pushButton_4.setGeometry(QtCore.QRect(380, 600, 93, 28))
          self.pushButton_4.setObjectName("pushButton_4")
          self.pushButton_4.clicked.connect(blind)
          self.label = QtWidgets.QLabel(Dialogxxx)
          self.label.setGeometry(QtCore.QRect(80, 10, 591, 31))
          font = QtGui.QFont()
          font.setPointSize(10)
          self.label.setFont(font)
          self.label.setObjectName("label")

          self.retranslateUi(Dialogxxx)
          QtCore.QMetaObject.connectSlotsByName(Dialogxxx)

    def retranslateUi(self, Dialogxxx):
        _translate = QtCore.QCoreApplication.translate
        Dialogxxx.setWindowTitle(_translate("Dialog", "MzDOCK"))
        self.pushButton.setText(_translate("Dialog", "<"))
        self.pushButton_2.setText(_translate("Dialog", ">"))
        self.pushButton_3.setText(_translate("Dialog", "Confirm"))
        self.pushButton_4.setText(_translate("Dialog", "Blind Dock"))
        self.pushButtonx.setText(_translate("Dialog", "Input PDB"))
        self.pushButtonxx.setText(_translate("Dialog", "Manual"))
        self.label.setText(_translate("Dialog", "Choose The Co-Crystallized Ligand(The Grid Box Will Be Placed In Its Position)"))
        self.labelx.setText(_translate("Dialog", "Buffer Space"))
        self.lineedit.setText(_translate("Dialog", "4"))
        self.pushflex.setText(_translate("Dialog", "FlexDock"))
class dialog3(QtWidgets.QDialog):
         def __init__(self, parent=None):
          super(dialog3, self).__init__(parent)
          self.ui = Ui_Dialog2()
          self.ui.setupUi2(self)
          self.setWindowTitle("MzDOCK")
          

         global dialog7
         def dialog7():
           
           app = QtWidgets.QApplication.instance()
           if app is None:
            app = QtWidgets.QApplication([])

           global dialogxxx
           dialogxxx = dialog3()
           dialogxxx.setWindowTitle("MzDOCK")
           dialogxxx.setWindowIcon(icon)
           dialogxxx.exec_()
         def closeEvent(self, event):
        # Finalize the VTK render window before closing the dialog
           molview.GetRenderWindow().Finalize()
           event.accept()

class Ui_Dialogf(object):
    def setupUif(self, Dialogf):
        Dialogf.setObjectName("Dialog")
        Dialogf.resize(338, 294)
        self.label = QtWidgets.QLabel(Dialogf)
        self.label.setGeometry(QtCore.QRect(50, 100, 55, 16))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(Dialogf)
        self.label_2.setGeometry(QtCore.QRect(50, 140, 55, 16))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(Dialogf)
        self.label_3.setGeometry(QtCore.QRect(50, 180, 55, 16))
        self.label_3.setObjectName("label_3")
        self.label7 = QtWidgets.QLabel(Dialogf)
        self.label7.setGeometry(QtCore.QRect(70, 60, 55, 16))
        self.label7.setObjectName("label7")
        self.lineEdit_7 = QtWidgets.QLineEdit(Dialogf)
        self.lineEdit_7.setGeometry(QtCore.QRect(120, 50, 51, 31))
        def file_exists_and_not_empty(directory, extension):
          for filename in os.listdir(directory):
              file_path = os.path.join(directory, filename)
              if filename.endswith(extension) and os.path.exists(file_path) and os.path.getsize(file_path) > 0:
                  return True
          return False
        def manualgrid():
            center_x = self.lineEdit.text()
            center_y = self.lineEdit_2.text()
            center_z = self.lineEdit_3.text()
            size_x = self.lineEdit_4.text()
            size_y = self.lineEdit_5.text()
            size_z = self.lineEdit_6.text()
            inn = self.lineEdit_7.text()

            try:
                cx = float(center_x)
                cy = float(center_y)
                cz = float(center_z)
                sx = float(size_x)
                sy = float(size_y)
                sz = float(size_z)
                mode = int(inn)

                if not all(isinstance(val, (int, float)) for val in [cx, cy, cz, sx, sy, sz]):
                    raise ValueError("Please provide numerical values (Int or Float)")

                if any(val > 126 for val in [sx, sy, sz]):
                    raise ValueError("126 Is The Upper Limit Of Size")

                if not (5 <= mode <= 50):
                    raise ValueError("The Number Of Modes Should be between 5 and 50")

                batch_dir = os.path.dirname(run_manualdock)
                os.chdir(batch_dir)

                run = [
                    run_manualdock,
                    str(mode),
                    str(cx),
                    str(cy),
                    str(cz),
                    str(sx),
                    str(sy),
                    str(sz)
                ]
                subprocess.call(run, shell=True)

                
                button5.setEnabled(False)
                button7.setEnabled(False)
                button6.setEnabled(False)
                button11.setEnabled(True)
                labelco.setEnabled(True)
                labeldck.setEnabled(True)
                
                dialogfxx.close()
                dialogxxx.close()
                if file_exists_and_not_empty(output, ".pdbqt"):
                  QMessageBox.information(Dialogf, "MzDOCK", "Successfully Docked")
                  odir = QFileDialog.getExistingDirectory(None, "Save Your Results In A Folder")
                  if not odir:
                          eror = "Your Results Were Not Saved As You Havent Selected Your Directory"
                          QMessageBox.critical(Dialogf, "MzDOCK", eror)
                          button11.setEnabled(True)
                          button7.setEnabled(False)
              
                  else:
            
                            for filename in os.listdir(output):
                              file_path = os.path.join(output, filename)
                              dest =os.path.join(odir, filename)
                              if os.path.isfile(file_path):
                                shutil.move(file_path, dest)
                            button11.setEnabled(False) 
                            QMessageBox.information(Dialogf, "MzDOCK", "Succesfully Saved The Results") 
                else:
                   QMessageBox.critical(Dialogf, "MzDOCK", "Docking Unsucessful")

            except ValueError as e:
                QMessageBox.warning(Dialogf, "MzDOCK", str(e))
                          

                 
          
        
        self.lineEdit = QtWidgets.QLineEdit(Dialogf)
        self.lineEdit.setGeometry(QtCore.QRect(120, 90, 51, 31))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(Dialogf)
        self.lineEdit_2.setGeometry(QtCore.QRect(120, 130, 51, 31))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_3 = QtWidgets.QLineEdit(Dialogf)
        self.lineEdit_3.setGeometry(QtCore.QRect(120, 170, 51, 31))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.label_4 = QtWidgets.QLabel(Dialogf)
        self.label_4.setGeometry(QtCore.QRect(210, 100, 55, 16))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(Dialogf)
        self.label_5.setGeometry(QtCore.QRect(210, 140, 55, 16))
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(Dialogf)
        self.label_6.setGeometry(QtCore.QRect(210, 180, 55, 16))
        self.label_6.setObjectName("label_6")
        self.lineEdit_4 = QtWidgets.QLineEdit(Dialogf)
        self.lineEdit_4.setGeometry(QtCore.QRect(260, 90, 51, 31))
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.lineEdit_5 = QtWidgets.QLineEdit(Dialogf)
        self.lineEdit_5.setGeometry(QtCore.QRect(260, 130, 51, 31))
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.lineEdit_6 = QtWidgets.QLineEdit(Dialogf)
        self.lineEdit_6.setGeometry(QtCore.QRect(260, 170, 51, 31))
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.pushButton = QtWidgets.QPushButton(Dialogf)
        self.pushButton.setGeometry(QtCore.QRect(120, 230, 93, 31))
        self.pushButton.setMinimumSize(QtCore.QSize(93, 31))
        self.pushButton.setMaximumSize(QtCore.QSize(93, 31))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(manualgrid)

        self.retranslateUi(Dialogf)
        QtCore.QMetaObject.connectSlotsByName(Dialogf)

    def retranslateUi(self, Dialogf):
        _translate = QtCore.QCoreApplication.translate
        Dialogf.setWindowTitle(_translate("Dialog", "MzDOCK"))
        self.label.setText(_translate("Dialog", "Center X"))
        self.label_2.setText(_translate("Dialog", "Center Y"))
        self.label_3.setText(_translate("Dialog", "Center Z"))
        self.label_4.setText(_translate("Dialog", "Size X"))
        self.label_5.setText(_translate("Dialog", "Size Y"))
        self.label_6.setText(_translate("Dialog", "Size Z"))
        self.pushButton.setText(_translate("Dialog", "Run"))
        self.lineEdit_4.setText(_translate("Dialog", "40"))
        self.lineEdit_5.setText(_translate("Dialog", "40"))
        self.lineEdit_6.setText(_translate("Dialog", "40"))
        self.lineEdit_7.setText(_translate("Dialog", "9"))
        self.label7.setText(_translate("Dialog", "Mode"))
        
class dialogf(QtWidgets.QDialog):
         def __init__(self, parent=None):
          super(dialogf, self).__init__(parent)
          self.ui = Ui_Dialogf()
          self.ui.setupUif(self)
          self.setWindowTitle("MzDOCK")
          

         global dialogfx
         def dialogfx():
           
           app = QtWidgets.QApplication.instance()
           if app is None:
            app = QtWidgets.QApplication([])

           global dialogfxx
           dialogfxx = dialogf()
           dialogfxx.setWindowTitle("MzDOCK")
           dialogfxx.setWindowIcon(icon)
           dialogfxx.exec_()


class Ui_Dialogions(object):
    def setupUions(self, Dialogi):
        
        global listcode
        listcode = AutoDockMoleculePreparation.std_types
        Dialogi.setObjectName("Dialog")
        Dialogi.resize(511, 422)
        self.label = QtWidgets.QLabel(Dialogi)
        self.label.setGeometry(QtCore.QRect(30, 90, 111, 16))
        self.label.setObjectName("label")
        def add():
           code = self.lineEdit.text()
          
           listcode.append(code)
           self.listWidget.addItem(code)

        def remove():
           selectitem = self.listWidget.currentItem()
           
           if selectitem is not None:
              codex = selectitem.text()
              listcode.remove(codex)
              self.listWidget.takeItem(self.listWidget.row(selectitem))
           else:
              QMessageBox.warning(Dialogi, "MzDOCK", "Select The Item To Remove")
        self.lineEdit = QtWidgets.QLineEdit(Dialogi)
        self.lineEdit.setGeometry(QtCore.QRect(150, 80, 113, 31))
        self.lineEdit.setObjectName("lineEdit")
        self.pushButton = QtWidgets.QPushButton(Dialogi)
        self.pushButton.setGeometry(QtCore.QRect(280, 80, 93, 28))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(add)
        def con():

          dialogiii.close()
                        

                 
                      
              
           
        
        
        
        self.pushButton_2 = QtWidgets.QPushButton(Dialogi)
        self.pushButton_2.setGeometry(QtCore.QRect(390, 80, 93, 28))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(con)
        self.pushButton_3 = QtWidgets.QPushButton(Dialogi)
        self.pushButton_3.setGeometry(QtCore.QRect(280, 110, 93, 28))
        self.pushButton_3.setObjectName("PushB3")
        self.pushButton_3.clicked.connect(remove)
        self.label_2 = QtWidgets.QLabel(Dialogi)
        self.label_2.setGeometry(QtCore.QRect(20, 350, 701, 21))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(Dialogi)
        self.label_3.setGeometry(QtCore.QRect(20, 370, 451, 16))
        self.label_3.setObjectName("label_3")
        self.listWidget = QtWidgets.QListWidget(Dialogi)
        self.listWidget.setGeometry(QtCore.QRect(20, 140, 471, 192))
        self.listWidget.setObjectName("listWidget")
        self.listWidget.addItems(listcode)
        self.label_4 = QtWidgets.QLabel(Dialogi)
        self.label_4.setGeometry(QtCore.QRect(20, 380, 400, 31))
        self.label_4.setObjectName("label_4")

        self.retranslateUi(Dialogi)
        QtCore.QMetaObject.connectSlotsByName(Dialogi)

    def retranslateUi(self, Dialogi):
        _translate = QtCore.QCoreApplication.translate
        Dialogi.setWindowTitle(_translate("Dialog", "MzDOCK"))
        self.label.setText(_translate("Dialog", "Add Ions/Cofactors"))
        self.pushButton.setText(_translate("Dialog", "Add"))
        self.pushButton_2.setText(_translate("Dialog", "Confirm"))
        self.label_2.setText(_translate("Dialog", "Write the code of the ions/cofactors/ligands which is found in the PDB to include "))
        self.label_3.setText(_translate("Dialog", "in the protein. The code should be written in all capital and should be same as "))
        self.label_4.setText(_translate("Dialog", "seen in the protein. For single atom ions, give one space to the left"))
        self.pushButton_3.setText(_translate("Dialog", "Remove"))
class dialogions(QtWidgets.QDialog):
         def __init__(self, parent=None):
          super(dialogions, self).__init__(parent)
          self.ui = Ui_Dialogions()
          self.ui.setupUions(self)
          self.setWindowTitle("MzDOCK")
          

         global dialogii
         def dialogii():
           
           app = QtWidgets.QApplication.instance()
           if app is None:
            app = QtWidgets.QApplication([])

           global dialogiii
           dialogiii = dialogions()
           dialogiii.setWindowTitle("MzDOCK")
           dialogiii.setWindowIcon(icon)
           dialogiii.exec_()


class Ui_Dialogzoom(UI_MainWindow):
    def setupUizoom(self, Dialogz):
        
        Dialogz.setObjectName("Dialog")
        Dialogz.resize(697, 762)
        Dialogz.setMinimumSize(QtCore.QSize(697, 762))
        Dialogz.setMaximumSize(QtCore.QSize(697, 762))
        self.view = QtWidgets.QWidget(Dialogz)
        self.view.setGeometry(QtCore.QRect(0, 0, 700, 750))

        self.layout = QtWidgets.QVBoxLayout(self.view)

        self.vtkWidget = QVTKRenderWindowInteractor(self.view)
        self.layout.addWidget(self.vtkWidget)

        self.ren = vtkRenderer()
        self.vtkWidget.GetRenderWindow().AddRenderer(self.ren)
        
        path = mainvtk.GetFileName()
        self.reader = vtkPDBReader()
        self.reader.SetFileName(path)
       

        self.ribbonFilter = vtkTubeFilter()
        self.ribbonFilter.SetInputConnection(self.reader.GetOutputPort())
        self.ribbonFilter.SetNumberOfSides(50)
        self.ribbonFilter.SetRadius(0.2)

        self.mapper = vtkPolyDataMapper()
        self.mapper.SetInputConnection(self.ribbonFilter.GetOutputPort())

        self.actor = vtkActor()
        self.actor.SetMapper(self.mapper)

        self.ren.AddActor(self.actor)
        self.ren.SetBackground(0, 0, 0)
        

        self.lighting = vtkLightKit()
        self.lighting.MaintainLuminanceOff()
        self.lighting.AddLightsToRenderer(self.ren)

        self.property = self.actor.GetProperty()
        self.property.SetInterpolationToPhong()
        self.property.SetAmbient(0.2)
        self.property.SetDiffuse(0.8)
        self.property.SetSpecular(0.8)
        self.property.SetSpecularPower(50)

        self.ren.ResetCamera()
        
        self.vtkWidget.GetRenderWindow().Render()
        self.vtkWidget.GetRenderWindow().SetSize(800, 600) 
        global zoomm
        zoomm = self.vtkWidget
        

        self.retranslateUi(Dialogz)
        QtCore.QMetaObject.connectSlotsByName(Dialogz)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "MzDOCK"))

class dialogzz(QtWidgets.QDialog):
         def __init__(self, parent=None):
          super(dialogzz, self).__init__(parent)
          self.ui = Ui_Dialogzoom()
          self.ui.setupUizoom(self)
          self.setWindowTitle("MzDOCK")
          
          

          

         global dialogzam
         def dialogzam():
           
           app = QtWidgets.QApplication.instance()
           if app is None:
            app = QtWidgets.QApplication([])

           global dialogzzz
           dialogzzz = dialogzz()
           dialogzzz.setWindowTitle("MzDOCK")
           dialogzzz.setWindowIcon(icon)
           dialogzzz.exec_()
         def closeEvent(self, event):
        # Finalize the VTK render window before closing the dialog
           zoomm.Finalize()
           event.accept()


class Ui_Dialogchain(object):
    def setupUic(self, Dialogc):
        Dialogc.setObjectName("Dialog")
        Dialogc.resize(480, 227)
        Dialogc.setMinimumSize(QtCore.QSize(480, 227))
        Dialogc.setMaximumSize(QtCore.QSize(480, 392))
        self.label = QtWidgets.QLabel(Dialogc)
        self.label.setGeometry(QtCore.QRect(60, 30, 411, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(Dialogc)
        self.label_2.setGeometry(QtCore.QRect(50, 120, 75, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(Dialogc)
        self.label_3.setGeometry(QtCore.QRect(50, 170, 70, 16))
        self.label_3.setObjectName("Label3") 
        self.label_3.setFont(font)                                 
        def chainselect():
              am = os.path.dirname(chainpathh)
              shutil.copy(pro, am)
              name = os.path.basename(pro)
              aa = os.path.dirname(chainpathh)
              os.chdir(aa)
              
              chainval1 = self.lineEdit.text()
              chainval2 = self.lineEdit2.text()
              listx = ['A', 'B', 'C', 'D', 'E', 'F']
              if not chainval2:
              
                
                if not chainval1.isalpha():
                  QMessageBox.warning(Dialogc, "MzDOCK", "Please Give input in Capital Single Letter ")
                elif chainval1 not in listx:
                  QMessageBox.warning(Dialogc, "MzDOCK", "Please Give input in Capital Single Letter ")

                else:

              
                  
                  chainval3 = name
                  list = [chainpathh, chainval1, chainval3]
                  subprocess.run(list, shell=True)
                  mainvtk.SetFileName(chain)
                  mainren.ResetCamera()
                  QMessageBox.information(Dialogc, "MzDOCK", "Chain Extracted")
                  dialogc.close()
              else:
                if not chainval1.isalpha():
                  QMessageBox.warning(Dialogc, "MzDOCK", "Please Give input in Capital Single Letter ")
                elif chainval1 not in listx:
                  QMessageBox.warning(Dialogc, "MzDOCK", "Please Give input in Capital Single Letter  ")
                elif not chainval2.isalpha():
                  QMessageBox.warning(Dialogc, "MzDOCK", "Please Give input in Capital Single Letter  ")
                elif chainval2 not in listx:
                  QMessageBox.warning(Dialogc, "MzDOCK", "Please Give input in Capital Single Letter ")
                else:
                   chainval3 = name
                   list = [chainpath2, chainval1, chainval2, chainval3]
                   subprocess.run(list, shell=True)
                   mainvtk.SetFileName(chain)
                   mainren.ResetCamera()
                   QMessageBox.information(Dialogc, "MzDOCK", "Chain Extracted")
                   dialogc.close()
                   


                  
                    
           
        self.lineEdit = QtWidgets.QLineEdit(Dialogc)
        self.lineEdit.setGeometry(QtCore.QRect(120, 100, 61, 41))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit2 = QtWidgets.QLineEdit(Dialogc)
        self.lineEdit2.setGeometry(QtCore.QRect(120, 150, 61, 41))
        self.lineEdit2.setObjectName("lineedit2")

        self.pushButton = QtWidgets.QPushButton(Dialogc)
        self.pushButton.setGeometry(QtCore.QRect(200, 110, 93, 28))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(chainselect)
        def noo():
           mainvtk.SetFileName(pro)
           mainren.ResetCamera()
           dialogc.close()
        
        self.pushButton_2 = QtWidgets.QPushButton(Dialogc)
        self.pushButton_2.setGeometry(QtCore.QRect(300, 110, 93, 28))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(noo)

        self.retranslateUi(Dialogc)
        QtCore.QMetaObject.connectSlotsByName(Dialogc)

    def retranslateUi(self, Dialogc):
        _translate = QtCore.QCoreApplication.translate
        Dialogc.setWindowTitle(_translate("Dialog", "MzDOCK"))
        self.label.setText(_translate("Dialog", "Do you want to extract a chain?"))
        self.label_2.setText(_translate("Dialog", "Chain1"))
        self.pushButton.setText(_translate("Dialog", "Confirm"))
        self.pushButton_2.setText(_translate("Dialog", "No"))
        self.label_3.setText(_translate("Dialog", "Chain2"))
class dialogchain(QtWidgets.QDialog):
         def __init__(self, parent=None):
          super(dialogchain, self).__init__(parent)
          self.ui = Ui_Dialogchain()
          self.ui.setupUic(self)
          self.setWindowTitle("MzDOCK")
          
          

          

         global dialogchains
         def dialogchains():
           
           app = QtWidgets.QApplication.instance()
           if app is None:
            app = QtWidgets.QApplication([])

           global dialogc
           dialogc = dialogchain()
           dialogc.setWindowTitle("MzDOCK")
           dialogc.setWindowIcon(icon)
           dialogc.exec_()
class Ui_Dialogflex(object):
    def setupUiflex(self, Dialogflex):
        Dialogflex.setObjectName("Dialogflex")
        Dialogflex.resize(773, 732)
        self.listWidget = QtWidgets.QListWidget(Dialogflex)
        self.listWidget.setGeometry(QtCore.QRect(40, 220, 291, 331))
        self.listWidget.setObjectName("listWidget")
        self.labeldist = QtWidgets.QLabel(Dialogflex)
        self.labeldist.setGeometry(QtCore.QRect(360, 650, 55, 16))
        def get_chain_resid_resname_strings(pdb_file):
    # Create a PDB parser
            parser = PDBParser()

            # Parse the PDB file
            structure = parser.get_structure("protein", pdb_file)

            # Initialize a set to store unique chain and residue strings
            chain_resid_resname_strings = set()
            chain_resid = set()
            mapping_dict = {}

            # Iterate over all models in the structure (assuming a single model)
            for model in structure:
                # Iterate over all chains in the model
                for chain in model:
                    chain_id = chain.id
                    # Iterate over all residues in the chain
                    for residue in chain:
                        residue_id = residue.id
                        resname = residue.resname
                        # Include the insertion code in the string
                        chain_resid_resname_string = f"{chain_id}:{residue_id[1]}{residue_id[2]}:{resname}"
                        chain_resid_string = f"{chain_id}:{residue_id[1]}"
                        # Add the string to the set
                        chain_resid_resname_strings.add(chain_resid_resname_string)
                        chain_resid.add(chain_resid_string)
                        mapping_dict[chain_resid_resname_string] = chain_resid_string

            return chain_resid_resname_strings, chain_resid, mapping_dict

        # Example usage
        chain_resid_resname, chain_res, mapping_dic = get_chain_resid_resname_strings(gpro)
        sorted_resid_resname = sorted(chain_resid_resname, key=lambda x: int(x.split(":")[1]))
        listx = sorted_resid_resname
        self.listWidget.addItems(listx)
        def item_selected():
    # Get the corresponding "ChainID:ResidueID" when an item is selected
          selected_items = self.listWidget.selectedItems()

          if selected_items:
              selected_item_text = selected_items[0].text()
              corresponding_chain_resid = mapping_dic.get(selected_item_text, "Not found")
              self.listWidget_2.addItem(corresponding_chain_resid)
        def remove_items():
          selected_items = self.listWidget_2.selectedItems()

          for item in selected_items:
              self.listWidget_2.takeItem(self.listWidget_2.row(item))


        def find_neighboring_residues(structure, chain_id, residue_id, distance_threshold):
          try:  # Find the target residue
            target_residue = structure[0][chain_id][residue_id]

            # Use NeighborSearch to find neighboring atoms
            ns = NeighborSearch(Selection.unfold_entities(structure, 'A'))
            neighbors = ns.search(target_residue['CA'].get_coord(), distance_threshold)  # Use 'CA' atom as a representative

            # Extract the neighboring residues
            neighboring_residues = set()
            for neighbor_atom in neighbors:
                neighboring_residue = neighbor_atom.get_parent()
                chain_id = neighboring_residue.get_parent().id
                resseq = neighboring_residue.id[1]
                neighboring_residues.add(f"{chain_id}:{resseq}")
            if not neighboring_residues:
              
              QMessageBox.warning(Dialogflex, "MzDOCK", f"No neighboring residues at {distance_threshold} angstrom distance")
              
            

                

            return neighboring_residues
          
             
          except (TypeError, KeyError) as e:
             QMessageBox.warning(Dialogflex, "MzDOCK", f"No neighboring residues at {distance_threshold} angstrom distance")
        def search():
          chain = self.lineEdit_2.text()
          resid = self.lineEdit_3.text()
          distance = self.lineEdit_5.text()
          

          try:
              res = int(resid)
              dist = int(distance)  # Try to convert resid to int
              if not chain.isalpha() or len(chain) != 1 or not chain.isupper():
                  raise ValueError("Enter a Single Capital Letter for Chain")
              if chain not in ['A', 'B', 'C', 'D', 'E']:
                  raise ValueError("Choose your Chain properly")
              if not isinstance(res, int):
                  raise ValueError("Choose Numerical Value for Residue")
              if not isinstance(dist, int):
                 raise ValueError("Choose Numerical Value")
              
              # Validations passed, call the function
              structure = PDBParser().get_structure('X', gpro)

              result = find_neighboring_residues(structure, chain, res, dist)
              try:
               self.listWidget_2.addItems(result)
              except TypeError as e:
                 QMessageBox.warning(Dialogflex, "MzDOCK", "Choose Different Distance Value")

          except ValueError as e:
              QMessageBox.warning(Dialogflex, "MzDOCK", str(e))
        def file_exists_and_not_empty(directory, extension):
          for filename in os.listdir(directory):
              file_path = os.path.join(directory, filename)
              if filename.endswith(extension) and os.path.exists(file_path) and os.path.getsize(file_path) > 0:
                  return True
          return False
        def letsgo():
           items = [self.listWidget_2.item(i).text() for i in range(self.listWidget_2.count())]
           result_string = ','.join(items)
           quotex = f'"{result_string}"'
           
           print(quotex)
          

           print(f"Flexible Residues: {result_string}")
           mode = self.lineEdit_4.text()
           try:
              
              mod = int(mode)
              if not isinstance(mod, int):
                 raise ValueError("Please give numerical value")
              if mod < 5:
                 raise ValueError("Choose value between 5-50")
              if mod > 50:
                 raise ValueError("Choose value between 5-50")
                 
              else:
                 
                 
        
                 taken = flexreader.GetFileName()
                 dest = select_co_move_path
                 shutil.copy(taken, dest)
                 button5.setEnabled(False)
                 prepare_co = co_activate_path
                 batch_dir = os.path.dirname(prepare_co)
                 os.chdir(batch_dir)
                 subprocess.call(prepare_co, shell=True)
                 batch = os.path.dirname(flexmanual)
                 os.chdir(batch)
                 listxx = [flexmanual, mode, "10", quotex]
                 subprocess.run(listxx, shell=True)

                
                 button5.setEnabled(False)
                 button7.setEnabled(False)
                 button6.setEnabled(False)
                 button11.setEnabled(True)
                 labelco.setEnabled(True)
                 labeldck.setEnabled(True)
                 buttonc.setEnabled(True)
                  
                 dialogflexx.close()
                 dialogxxx.close()
                 if file_exists_and_not_empty(output, ".pdbqt"):
                    
                    QMessageBox.information(Dialogflex, "MzDOCK", "Successfully Docked")
                    odir = QFileDialog.getExistingDirectory(None, "Save Your Results In A Folder")
                    if not odir:
                              eror = "Your Results Were Not Saved As You Havent Selected Your Directory"
                              QMessageBox.critical(Dialogflex, "MzDOCK", eror)
                              button11.setEnabled(True)
                              button7.setEnabled(False)
                  
                    else:
                
                                for filename in os.listdir(output):
                                  file_path = os.path.join(output, filename)
                                  dest =os.path.join(odir, filename)
                                  if os.path.isfile(file_path):
                                    shutil.move(file_path, dest)
                                button11.setEnabled(False) 
                                QMessageBox.information(Dialogflex, "MzDOCK", "Succesfully Saved The Results") 
                 else:
                    QMessageBox.critical(Dialogflex, "MzDOCK", "Docking Unsuccesful. (Likely due to residue outside search space)")
                  

           except ValueError as e:
              QMessageBox.warning(Dialogflex, "MzDOCK", str(e))


           
            
            
            
        self.label = QtWidgets.QLabel(Dialogflex)
        self.label.setGeometry(QtCore.QRect(20, 20, 161, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label.setFont(font)
        self.label.setObjectName("label")
       
        self.label_2 = QtWidgets.QLabel(Dialogflex)
        self.label_2.setGeometry(QtCore.QRect(120, 60, 61, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.labelmode = QtWidgets.QLabel(Dialogflex)
        self.labelmode.setGeometry(QtCore.QRect(400, 20, 61, 31))
        
        self.lineEdit_4 = QtWidgets.QLineEdit(Dialogflex)
        self.lineEdit_4.setGeometry(QtCore.QRect(440, 20, 61, 31))
        self.lineEdit = QtWidgets.QLineEdit(Dialogflex)
        self.lineEdit.setGeometry(QtCore.QRect(180, 60, 61, 31))
        self.lineEdit.setObjectName("lineEdit")
        self.label_3 = QtWidgets.QLabel(Dialogflex)
        self.label_3.setGeometry(QtCore.QRect(310, 100, 131, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.line = QtWidgets.QFrame(Dialogflex)
        self.line.setGeometry(QtCore.QRect(0, 90, 821, 16))
        self.line.setMinimumSize(QtCore.QSize(100, 0))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.line.setFont(font)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.label_4 = QtWidgets.QLabel(Dialogflex)
        self.label_4.setGeometry(QtCore.QRect(50, 190, 71, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.lineEdit_5 = QtWidgets.QLineEdit(Dialogflex)
        self.lineEdit_5.setGeometry(QtCore.QRect(415, 640, 41, 31))
        self.pushButton_2 = QtWidgets.QPushButton(Dialogflex)
        self.pushButton_2.setGeometry(QtCore.QRect(240, 570, 93, 28))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(item_selected)
        self.listWidget_2 = QtWidgets.QListWidget(Dialogflex)
        self.listWidget_2.setGeometry(QtCore.QRect(460, 220, 301, 331))
        self.listWidget_2.setObjectName("listWidget_2")
        
        self.label_5 = QtWidgets.QLabel(Dialogflex)
        self.label_5.setGeometry(QtCore.QRect(460, 190, 121, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.pushButton_3 = QtWidgets.QPushButton(Dialogflex)
        self.pushButton_3.setGeometry(QtCore.QRect(460, 570, 93, 28))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(remove_items)
        self.label_6 = QtWidgets.QLabel(Dialogflex)
        self.label_6.setGeometry(QtCore.QRect(50, 650, 121, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(Dialogflex)
        self.label_7.setGeometry(QtCore.QRect(180, 650, 55, 16))
        self.label_7.setObjectName("label_7")
        self.lineEdit_2 = QtWidgets.QLineEdit(Dialogflex)
        self.lineEdit_2.setGeometry(QtCore.QRect(220, 640, 41, 31))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.label_8 = QtWidgets.QLabel(Dialogflex)
        self.label_8.setGeometry(QtCore.QRect(270, 650, 55, 16))
        self.label_8.setObjectName("label_8")
        self.lineEdit_3 = QtWidgets.QLineEdit(Dialogflex)
        self.lineEdit_3.setGeometry(QtCore.QRect(310, 640, 41, 31))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.pushButton_4 = QtWidgets.QPushButton(Dialogflex)
        self.pushButton_4.setGeometry(QtCore.QRect(230, 690, 93, 28))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(search)
        self.pushButton_5 = QtWidgets.QPushButton(Dialogflex)
        self.pushButton_5.setGeometry(QtCore.QRect(620, 660, 131, 41))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_5.clicked.connect(letsgo)
        def co_flex():
           distance = self.lineEdit.text()
           mode = self.lineEdit_4.text()
           try:
              dist = int(distance)
              mod = int(mode)
              if not isinstance(dist, int):
                 raise ValueError("Please give numerical value")
              if dist > 6:
                 raise ValueError("Choose value between 1-6")
              if dist < 1:
                 raise ValueError("Choose value between 1-6")
              if not isinstance(mod, int):
                 raise ValueError("Please give numerical value")
              if mod < 5:
                 raise ValueError("Choose value between 5-50")
              if mod > 50:
                 raise ValueError("Choose value between 5-50")
                 
              else:
                 
                 taken = flexreader.GetFileName()
                 dest = select_co_move_path
                 shutil.copy(taken, dest)
                 button5.setEnabled(False)
                 prepare_co = co_activate_path
                 batch_dir = os.path.dirname(prepare_co)
                 os.chdir(batch_dir)
                 subprocess.call(prepare_co, shell=True)
                 
                 batch = os.path.dirname(flexcopath)
                 os.chdir(batch)
                 listxx = [flexcopath, mode, "10", distance]
                 subprocess.call(listxx, shell=True)

                
                 button5.setEnabled(False)
                 button7.setEnabled(False)
                 button6.setEnabled(False)
                 button11.setEnabled(True)
                 labelco.setEnabled(True)
                 labeldck.setEnabled(True)
                 buttonc.setEnabled(True)
                  
                 dialogflexx.close()
                 dialogxxx.close()
                 if file_exists_and_not_empty(output, ".pdbqt"):
                    
                    QMessageBox.information(Dialogflex, "MzDOCK", "Successfully Docked")
                    
                    odir = QFileDialog.getExistingDirectory(None, "Save Your Results In A Folder")
                    if not odir:
                              eror = "Your Results Were Not Saved As You Havent Selected Your Directory"
                              QMessageBox.critical(Dialogflex, "MzDOCK", eror)
                              button11.setEnabled(True)
                              button7.setEnabled(False)
                  
                    else:
                
                                for filename in os.listdir(output):
                                  file_path = os.path.join(output, filename)
                                  dest =os.path.join(odir, filename)
                                  if os.path.isfile(file_path):
                                    shutil.move(file_path, dest)
                                button11.setEnabled(False) 
                                QMessageBox.information(Dialogflex, "MzDOCK", "Succesfully Saved The Results") 
                 else:
                    QMessageBox.critical(Dialogflex, "MzDOCK", "Successfully Unsucessful(Likely due to residues outside search space)")
                

           except ValueError as e:
              QMessageBox.warning(Dialogflex, "MzDOCK", str(e))
        
        
        self.pushButton = QtWidgets.QPushButton(Dialogflex)
        self.pushButton.setGeometry(QtCore.QRect(180, 20, 93, 28))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(co_flex)
                 


        self.retranslateUi(Dialogflex)
        QtCore.QMetaObject.connectSlotsByName(Dialogflex)

    def retranslateUi(self, Dialogflex):
        _translate = QtCore.QCoreApplication.translate
        Dialogflex.setWindowTitle(_translate("Dialogflex", "MzDOCK"))
        self.label.setText(_translate("Dialogflex", "FlexDock with Co Ligand "))
        self.pushButton.setText(_translate("Dialogflex", "Confirm"))
        self.label_2.setText(_translate("Dialogflex", "Distance"))
        self.label_3.setText(_translate("Dialogflex", "Manual FlexDock"))
        self.label_4.setText(_translate("Dialogflex", "Residues"))
        self.pushButton_2.setText(_translate("Dialogflex", "Add"))
        self.label_5.setText(_translate("Dialogflex", "Selected Residues"))
        self.pushButton_3.setText(_translate("Dialogflex", "Remove"))
        self.label_6.setText(_translate("Dialogflex", "Search Neighbour"))
        self.label_7.setText(_translate("Dialogflex", "Chain"))
        self.label_8.setText(_translate("Dialogflex", "Res id"))
        self.pushButton_4.setText(_translate("Dialogflex", "Search"))
        self.pushButton_5.setText(_translate("Dialogflex", "Confirm"))
        self.lineEdit.setText(_translate("Dialog", "5"))
        self.lineEdit_2.setText(_translate("Dialog", "A"))
        self.lineEdit_3.setText(_translate("Dialog", "1"))
        self.labelmode.setText(_translate("Dialog", "Mode"))
        self.lineEdit_4.setText(_translate("Dialog", "9"))
        self.labeldist.setText(_translate("Dialog", "Distance"))
        self.lineEdit_5.setText(_translate("Dialog", "5"))
class dialogflex(QtWidgets.QDialog):
         def __init__(self, parent=None):
          super(dialogflex, self).__init__(parent)
          self.ui = Ui_Dialogflex()
          self.ui.setupUiflex(self)
          self.setWindowTitle("MzDOCK")
          
          

          

         global dialogflexible
         def dialogflexible():
           
           app = QtWidgets.QApplication.instance()
           if app is None:
            app = QtWidgets.QApplication([])
           global flexreader
           flexreader = hans
           

           global dialogflexx
           dialogflexx = dialogflex()
           dialogflexx.setWindowTitle("MzDOCK")
           dialogflexx.setWindowIcon(icon)
           dialogflexx.exec_()

           
         


if __name__ == "__main__":
        import sys
        app = QtWidgets.QApplication(sys.argv)
        MainWindow = QtWidgets.QMainWindow()
        ui = UI_MainWindow()
        ui.setupUI(MainWindow)
        MainWindow.closeEvent = show_exit_confirmation
        MainWindow.show()
        if getattr(sys, 'frozen', False):
          pyi_splash.close()
        sys.exit(app.exec_())



